{
  "openapi": "3.0.0",
  "info": {
    "version": "2006-03-01",
    "x-release": "s3",
    "title": "Amazon Simple Storage Service",
    "description": "<p/>",
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png",
      "backgroundColor": "#FFFFFF"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "contact": {
      "name": "Mike Ralphson",
      "email": "mike.ralphson@gmail.com",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "x-providerName": "amazonaws.com",
    "x-serviceName": "s3",
    "x-origin": [
      {
        "contentType": "application/json",
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/s3-2006-03-01.normal.json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "x-apisguru-driver": "external"
      }
    ],
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-preferred": true
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/s3/"
  },
  "servers": [
    {
      "url": "https://s3.{region}.cloud.sap",
      "variables": {
        "region": {
          "description": "The AWS region",
          "enum": [
            "eu-de-1",
            "eu-de-2"
          ],
          "default": "eu-de-1"
        }
      },
      "description": "The Amazon S3 multi-region endpoint"
    },
    {
      "url": "https://objectstore-3.{region}.cloud.sap",
      "variables": {
        "region": {
          "description": "The AWS region",
          "enum": [
            "eu-de-1",
            "eu-de-2"
          ],
          "default": "eu-de-1"
        }
      },
      "description": "The Amazon S3 multi-region endpoint"
    },
    {
      "url": "http://s3waf.oidctest.c.eu-de-2.cloud.sap",
      "description": "S3 with WAF testing endpoint"
    }
  ],
  "x-hasEquivalentPaths": true,
  "paths": {
    "/{Bucket}/{Key}#uploadId": {
      "delete": {
        "operationId": "AbortMultipartUpload",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadAbort.html"
        },
        "responses": {
          "204": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AbortMultipartUploadOutput"
                }
              }
            }
          },
          "480": {
            "description": "NoSuchUpload",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NoSuchUpload"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Key of the object for which the multipart upload was initiated.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "uploadId",
            "in": "query",
            "required": true,
            "description": "Upload ID that identifies the multipart upload.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-expected-bucket-owner",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ],
      "post": {
        "operationId": "CompleteMultipartUpload",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadComplete.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteMultipartUploadOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the multipart upload was initiated.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "uploadId",
            "in": "query",
            "required": true,
            "description": "ID for the initiated multipart upload.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-checksum-crc32",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-checksum-crc32c",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-checksum-sha1",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-checksum-sha256",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "CompleteMultipartUpload": {
                    "description": "The container for the completed multipart upload details.",
                    "type": "object",
                    "properties": {
                      "Parts": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/CompletedPartList"
                          },
                          {
                            "xml": {
                              "name": "Part"
                            },
                            "description": "<p>Array of CompletedPart data types.</p> <p>If you do not supply a valid <code>Part</code> with your request, the service sends back an HTTP 400 response.</p>"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "ListParts",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadListParts.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListPartsOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the multipart upload was initiated.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "max-parts",
            "in": "query",
            "required": false,
            "description": "Sets the maximum number of parts to return.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "part-number-marker",
            "in": "query",
            "required": false,
            "description": "Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "uploadId",
            "in": "query",
            "required": true,
            "description": "Upload ID identifying the multipart upload whose parts are being listed.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxParts",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination limit",
            "required": false
          },
          {
            "name": "PartNumberMarker",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination token",
            "required": false
          }
        ]
      }
    },
    "/{Bucket}/{Key}#x-amz-copy-source": {
      "put": {
        "operationId": "CopyObject",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectCOPY.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CopyObjectOutput"
                }
              }
            }
          },
          "480": {
            "description": "ObjectNotInActiveTierError",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectNotInActiveTierError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "<p>The name of the destination bucket.</p> <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html\">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p> <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <code> <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>. When using this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html\">Using Amazon S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cache-Control",
            "in": "header",
            "required": false,
            "description": "Specifies caching behavior along the request/reply chain.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-checksum-algorithm",
            "in": "header",
            "required": false,
            "description": "Indicates the algorithm you want Amazon S3 to use to create the checksum for the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html\">Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.",
            "schema": {
              "type": "string",
              "enum": [
                "CRC32",
                "CRC32C",
                "SHA1",
                "SHA256"
              ]
            }
          },
          {
            "name": "Content-Disposition",
            "in": "header",
            "required": false,
            "description": "Specifies presentational information for the object.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Encoding",
            "in": "header",
            "required": false,
            "description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Language",
            "in": "header",
            "required": false,
            "description": "The language the content is in.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "description": "A standard MIME type describing the format of the object data.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-copy-source",
            "in": "header",
            "required": true,
            "description": "<p>Specifies the source object for the copy operation. You specify the value in one of two formats, depending on whether you want to access the source object through an <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html\">access point</a>:</p> <ul> <li> <p>For objects not accessed through an access point, specify the name of the source bucket and the key of the source object, separated by a slash (/). For example, to copy the object <code>reports/january.pdf</code> from the bucket <code>awsexamplebucket</code>, use <code>awsexamplebucket/reports/january.pdf</code>. The value must be URL-encoded.</p> </li> <li> <p>For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format <code>arn:aws:s3:&lt;Region&gt;:&lt;account-id&gt;:accesspoint/&lt;access-point-name&gt;/object/&lt;key&gt;</code>. For example, to copy the object <code>reports/january.pdf</code> through access point <code>my-access-point</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf</code>. The value must be URL encoded.</p> <note> <p>Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same Amazon Web Services Region.</p> </note> <p>Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format <code>arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/object/&lt;key&gt;</code>. For example, to copy the object <code>reports/january.pdf</code> through outpost <code>my-outpost</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf</code>. The value must be URL-encoded. </p> </li> </ul> <p>To copy a specific version of an object, append <code>?versionId=&lt;version-id&gt;</code> to the value (for example, <code>awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893</code>). If you don't specify a version ID, Amazon S3 copies the latest version of the source object.</p>",
            "schema": {
              "type": "string",
              "pattern": "\\/.+\\/.+"
            }
          },
          {
            "name": "x-amz-copy-source-if-match",
            "in": "header",
            "required": false,
            "description": "Copies the object if its entity tag (ETag) matches the specified tag.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-copy-source-if-modified-since",
            "in": "header",
            "required": false,
            "description": "Copies the object if it has been modified since the specified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "x-amz-copy-source-if-none-match",
            "in": "header",
            "required": false,
            "description": "Copies the object if its entity tag (ETag) is different than the specified ETag.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-copy-source-if-unmodified-since",
            "in": "header",
            "required": false,
            "description": "Copies the object if it hasn't been modified since the specified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Expires",
            "in": "header",
            "required": false,
            "description": "The date and time at which the object is no longer cacheable.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The key of the destination object.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "x-amz-metadata-directive",
            "in": "header",
            "required": false,
            "description": "Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request.",
            "schema": {
              "type": "string",
              "enum": [
                "COPY",
                "REPLACE"
              ]
            }
          },
          {
            "name": "x-amz-storage-class",
            "in": "header",
            "required": false,
            "description": "By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability. Depending on performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses the OUTPOSTS Storage Class. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html\">Storage Classes</a> in the <i>Amazon S3 User Guide</i>.",
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "REDUCED_REDUNDANCY",
                "STANDARD_IA",
                "ONEZONE_IA",
                "INTELLIGENT_TIERING",
                "GLACIER",
                "DEEP_ARCHIVE",
                "OUTPOSTS",
                "GLACIER_IR",
                "SNOW"
              ]
            }
          },
          {
            "name": "x-amz-object-lock-mode",
            "in": "header",
            "required": false,
            "description": "The Object Lock mode that you want to apply to the copied object.",
            "schema": {
              "type": "string",
              "enum": [
                "GOVERNANCE",
                "COMPLIANCE"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "x-amz-meta-": {
                    "description": "A map of metadata to store with the object in S3.",
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/MetadataValue"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ],
      "head": {
        "operationId": "HeadBucket",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketHEAD.html"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "NoSuchBucket",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NoSuchBucket"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "operationId": "ListObjects",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGET.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListObjectsOutput"
                }
              }
            }
          },
          "480": {
            "description": "NoSuchBucket",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NoSuchBucket"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delimiter",
            "in": "query",
            "required": false,
            "description": "A delimiter is a character you use to group keys.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encoding-type",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string",
              "enum": [
                "url"
              ],
              "description": ""
            }
          },
          {
            "name": "marker",
            "in": "query",
            "required": false,
            "description": "Marker is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. Marker can be any key in the bucket.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max-keys",
            "in": "query",
            "required": false,
            "description": "Sets the maximum number of keys returned in the response. By default the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more. ",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "description": "Limits the response to keys that begin with the specified prefix.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxKeys",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination limit",
            "required": false
          },
          {
            "name": "Marker",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination token",
            "required": false
          }
        ]
      }
    },
    "/{Bucket}/{Key}#uploads": {
      "post": {
        "operationId": "CreateMultipartUpload",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadInitiate.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMultipartUploadOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "<p>The name of the bucket to which to initiate the upload</p> <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html\">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p> <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <code> <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>. When using this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html\">Using Amazon S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cache-Control",
            "in": "header",
            "required": false,
            "description": "Specifies caching behavior along the request/reply chain.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Disposition",
            "in": "header",
            "required": false,
            "description": "Specifies presentational information for the object.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Encoding",
            "in": "header",
            "required": false,
            "description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Language",
            "in": "header",
            "required": false,
            "description": "The language the content is in.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "description": "A standard MIME type describing the format of the object data.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Expires",
            "in": "header",
            "required": false,
            "description": "The date and time at which the object is no longer cacheable.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the multipart upload is to be initiated.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "x-amz-storage-class",
            "in": "header",
            "required": false,
            "description": "By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability. Depending on performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses the OUTPOSTS Storage Class. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html\">Storage Classes</a> in the <i>Amazon S3 User Guide</i>.",
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "REDUCED_REDUNDANCY",
                "STANDARD_IA",
                "ONEZONE_IA",
                "INTELLIGENT_TIERING",
                "GLACIER",
                "DEEP_ARCHIVE",
                "OUTPOSTS",
                "GLACIER_IR",
                "SNOW"
              ]
            }
          },
          {
            "name": "x-amz-object-lock-mode",
            "in": "header",
            "required": false,
            "description": "Specifies the Object Lock mode that you want to apply to the uploaded object.",
            "schema": {
              "type": "string",
              "enum": [
                "GOVERNANCE",
                "COMPLIANCE"
              ]
            }
          },
          {
            "name": "x-amz-object-lock-retain-until-date",
            "in": "header",
            "required": false,
            "description": "Specifies the date and time when you want the Object Lock to expire.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "x-amz-object-lock-legal-hold",
            "in": "header",
            "required": false,
            "description": "Specifies whether you want to apply a legal hold to the uploaded object.",
            "schema": {
              "type": "string",
              "enum": [
                "ON",
                "OFF"
              ]
            }
          },
          {
            "name": "x-amz-checksum-algorithm",
            "in": "header",
            "required": false,
            "description": "Indicates the algorithm you want Amazon S3 to use to create the checksum for the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html\">Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.",
            "schema": {
              "type": "string",
              "enum": [
                "CRC32",
                "CRC32C",
                "SHA1",
                "SHA256"
              ]
            }
          },
          {
            "name": "uploads",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            },
            "allowEmptyValue": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "x-amz-meta-": {
                    "description": "A map of metadata to store with the object in S3.",
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/MetadataValue"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}": {
      "delete": {
        "operationId": "DeleteObject",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectDELETE.html"
        },
        "responses": {
          "204": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteObjectOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "<p>The bucket name of the bucket containing the object. </p> <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html\">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p> <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <code> <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>. When using this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html\">Using Amazon S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Key name of the object to delete.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "versionId",
            "in": "query",
            "required": false,
            "description": "VersionId used to reference a specific version of the object.",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ],
      "get": {
        "operationId": "GetObject",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectGET.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GetObjectOutput"
                }
              }
            }
          },
          "480": {
            "description": "NoSuchKey",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NoSuchKey"
                }
              }
            }
          },
          "481": {
            "description": "InvalidObjectState",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidObjectState"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "description": "Return the object only if its entity tag (ETag) is the same as the one specified; otherwise, return a 412 (precondition failed) error.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "required": false,
            "description": "Return the object only if it has been modified since the specified time; otherwise, return a 304 (not modified) error.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "required": false,
            "description": "Return the object only if its entity tag (ETag) is different from the one specified; otherwise, return a 304 (not modified) error.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "required": false,
            "description": "Return the object only if it has not been modified since the specified time; otherwise, return a 412 (precondition failed) error.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Key of the object to get.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "Range",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response-cache-control",
            "in": "query",
            "required": false,
            "description": "Sets the <code>Cache-Control</code> header of the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response-content-disposition",
            "in": "query",
            "required": false,
            "description": "Sets the <code>Content-Disposition</code> header of the response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response-content-encoding",
            "in": "query",
            "required": false,
            "description": "Sets the <code>Content-Encoding</code> header of the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response-content-language",
            "in": "query",
            "required": false,
            "description": "Sets the <code>Content-Language</code> header of the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response-content-type",
            "in": "query",
            "required": false,
            "description": "Sets the <code>Content-Type</code> header of the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response-expires",
            "in": "query",
            "required": false,
            "description": "Sets the <code>Expires</code> header of the response.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "versionId",
            "in": "query",
            "required": false,
            "description": "VersionId used to reference a specific version of the object.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partNumber",
            "in": "query",
            "required": false,
            "description": "Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "x-amz-checksum-mode",
            "in": "header",
            "required": false,
            "description": "To retrieve the checksum, this mode must be enabled.",
            "schema": {
              "type": "string",
              "enum": [
                "ENABLED"
              ]
            }
          }
        ]
      },
      "head": {
        "operationId": "HeadObject",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectHEAD.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/HeadObjectOutput"
                }
              }
            }
          },
          "480": {
            "description": "NoSuchKey",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NoSuchKey"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "<p>The name of the bucket containing the object.</p> <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html\">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p> <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <code> <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>. When using this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html\">Using Amazon S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "description": "Return the object only if its entity tag (ETag) is the same as the one specified; otherwise, return a 412 (precondition failed) error.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "required": false,
            "description": "Return the object only if it has been modified since the specified time; otherwise, return a 304 (not modified) error.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "required": false,
            "description": "Return the object only if its entity tag (ETag) is different from the one specified; otherwise, return a 304 (not modified) error.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "required": false,
            "description": "Return the object only if it has not been modified since the specified time; otherwise, return a 412 (precondition failed) error.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The object key.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "Range",
            "in": "header",
            "required": false,
            "description": "Because <code>HeadObject</code> returns only the metadata for an object, this parameter has no effect.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "in": "query",
            "required": false,
            "description": "VersionId used to reference a specific version of the object.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partNumber",
            "in": "query",
            "required": false,
            "description": "Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "x-amz-checksum-mode",
            "in": "header",
            "required": false,
            "description": "<p>To retrieve the checksum, this parameter must be enabled.</p> <p>In addition, if you enable <code>ChecksumMode</code> and the object is encrypted with Amazon Web Services Key Management Service (Amazon Web Services KMS), you must have permission to use the <code>kms:Decrypt</code> action for the request to succeed.</p>",
            "schema": {
              "type": "string",
              "enum": [
                "ENABLED"
              ]
            }
          }
        ]
      },
      "put": {
        "operationId": "PutObject",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectPUT.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutObjectOutput"
                }
              }
            }
          }
        },
        "parameters": [
         {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "<p>The bucket name to which the PUT action was initiated. </p> <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html\">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p> <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <code> <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>. When using this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html\">Using Amazon S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cache-Control",
            "in": "header",
            "required": false,
            "description": " Can be used to specify caching behavior along the request/reply chain. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Disposition",
            "in": "header",
            "required": false,
            "description": "Specifies presentational information for the object. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Encoding",
            "in": "header",
            "required": false,
            "description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Language",
            "in": "header",
            "required": false,
            "description": "The language the content is in.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Length",
            "in": "header",
            "required": false,
            "description": "Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13</a>.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Content-MD5",
            "in": "header",
            "required": false,
            "description": "The base64-encoded 128-bit MD5 digest of the message (without the headers) according to RFC 1864. This header can be used as a message integrity check to verify that the data is the same data that was originally sent. Although it is optional, we recommend using the Content-MD5 mechanism as an end-to-end integrity check. For more information about REST request authentication, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html\">REST Authentication</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "description": "A standard MIME type describing the format of the contents. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-sdk-checksum-algorithm",
            "in": "header",
            "required": false,
            "description": "<p>Indicates the algorithm used to create the checksum for the object when using the SDK. This header will not provide any additional functionality if not using the SDK. When sending this header, there must be a corresponding <code>x-amz-checksum</code> or <code>x-amz-trailer</code> header sent. Otherwise, Amazon S3 fails the request with the HTTP status code <code>400 Bad Request</code>. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html\">Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.</p> <p>If you provide an individual checksum, Amazon S3 ignores any provided <code>ChecksumAlgorithm</code> parameter.</p>",
            "schema": {
              "type": "string",
              "enum": [
                "CRC32",
                "CRC32C",
                "SHA1",
                "SHA256"
              ]
            }
          },
          {
            "name": "x-amz-checksum-crc32",
            "in": "header",
            "required": false,
            "description": "This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC32 checksum of the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html\">Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-checksum-crc32c",
            "in": "header",
            "required": false,
            "description": "This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC32C checksum of the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html\">Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-checksum-sha1",
            "in": "header",
            "required": false,
            "description": "This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 160-bit SHA-1 digest of the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html\">Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-checksum-sha256",
            "in": "header",
            "required": false,
            "description": "This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 256-bit SHA-256 digest of the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html\">Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Expires",
            "in": "header",
            "required": false,
            "description": "The date and time at which the object is no longer cacheable. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21</a>.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the PUT action was initiated.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "x-amz-storage-class",
            "in": "header",
            "required": false,
            "description": "By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability. Depending on performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses the OUTPOSTS Storage Class. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html\">Storage Classes</a> in the <i>Amazon S3 User Guide</i>.",
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "REDUCED_REDUNDANCY",
                "STANDARD_IA",
                "ONEZONE_IA",
                "INTELLIGENT_TIERING",
                "GLACIER",
                "DEEP_ARCHIVE",
                "OUTPOSTS",
                "GLACIER_IR",
                "SNOW"
              ]
            }
          },
          {
            "name": "x-amz-object-lock-mode",
            "in": "header",
            "required": false,
            "description": "The Object Lock mode that you want to apply to this object.",
            "schema": {
              "type": "string",
              "enum": [
                "GOVERNANCE",
                "COMPLIANCE"
              ]
            }
          },
          {
            "name": "x-amz-object-lock-retain-until-date",
            "in": "header",
            "required": false,
            "description": "The date and time when you want this object's Object Lock to expire. Must be formatted as a timestamp parameter.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "x-amz-object-lock-legal-hold",
            "in": "header",
            "required": false,
            "description": "Specifies whether a legal hold will be applied to this object. For more information about S3 Object Lock, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html\">Object Lock</a>.",
            "schema": {
              "type": "string",
              "enum": [
                "ON",
                "OFF"
              ]
            }
          },
          {
            "name": "x-amz-expected-bucket-owner",
            "in": "header",
            "required": false,
            "description": "The account ID of the expected bucket owner. If the bucket is owned by a different account, the request fails with the HTTP status code <code>403 Forbidden</code> (access denied).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "Body": {
                    "description": "Object data.",
                    "type": "string"
                  },
                  "x-amz-meta-": {
                    "description": "A map of metadata to store with the object in S3.",
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/MetadataValue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{Bucket}#delete": {
      "post": {
        "operationId": "DeleteObjects",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/multiobjectdeleteapi.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteObjectsOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-bypass-governance-retention",
            "in": "header",
            "required": false,
            "description": "Specifies whether you want to delete this object even if it has a Governance-type Object Lock in place. To use this header, you must have the <code>s3:BypassGovernanceRetention</code> permission.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "x-amz-sdk-checksum-algorithm",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string",
              "enum": [
                "CRC32",
                "CRC32C",
                "SHA1",
                "SHA256"
              ]
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            },
            "allowEmptyValue": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/xml": {
              "schema": {
                "type": "object",
                "required": [
                  "Delete"
                ],
                "properties": {
                  "Delete": {
                    "description": "Container for the objects to delete.",
                    "type": "object",
                    "properties": {
                      "Objects": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/ObjectIdentifierList"
                          },
                          {
                            "xml": {
                              "name": "Object"
                            },
                            "description": "The objects to delete."
                          }
                        ]
                      },
                      "Quiet": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Quiet"
                          },
                          {
                            "description": "Element to enable quiet mode for the request. When you add this element, you must set its value to true."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#location": {
      "get": {
        "operationId": "GetBucketLocation",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETlocation.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GetBucketLocationOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "The name of the bucket for which to get the location.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            },
            "allowEmptyValue": true
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#attributes&x-amz-object-attributes": {
      "get": {
        "operationId": "GetObjectAttributes",
        "description": "",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GetObjectAttributesOutput"
                }
              }
            }
          },
          "480": {
            "description": "NoSuchKey",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NoSuchKey"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "The object key.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "versionId",
            "in": "query",
            "required": false,
            "description": "The version ID used to reference a specific version of the object.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-max-parts",
            "in": "header",
            "required": false,
            "description": "Sets the maximum number of parts to return.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "x-amz-part-number-marker",
            "in": "header",
            "required": false,
            "description": "Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "x-amz-object-attributes",
            "in": "header",
            "required": true,
            "description": "An XML header that specifies the fields at the root level that you want returned in the response. Fields that you do not specify are not returned.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ObjectAttributes"
              }
            }
          },
          {
            "name": "attributes",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            },
            "allowEmptyValue": true
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#object-lock": {
      "get": {
        "operationId": "GetObjectLockConfiguration",
        "description": "",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GetObjectLockConfigurationOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "object-lock",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            },
            "allowEmptyValue": true
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ],
      "put": {
        "operationId": "PutObjectLockConfiguration",
        "description": "",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutObjectLockConfigurationOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "The bucket whose Object Lock configuration you want to create or replace.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-bucket-object-lock-token",
            "in": "header",
            "required": false,
            "description": "A token to allow Object Lock to be enabled for an existing bucket.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-MD5",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-sdk-checksum-algorithm",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string",
              "enum": [
                "CRC32",
                "CRC32C",
                "SHA1",
                "SHA256"
              ]
            }
          },
          {
            "name": "object-lock",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            },
            "allowEmptyValue": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "ObjectLockConfiguration": {
                    "description": "The container element for Object Lock configuration parameters.",
                    "type": "object",
                    "properties": {
                      "ObjectLockEnabled": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/ObjectLockEnabled"
                          },
                          {
                            "description": "Indicates whether this bucket has an Object Lock configuration enabled. Enable <code>ObjectLockEnabled</code> when you apply <code>ObjectLockConfiguration</code> to a bucket. "
                          }
                        ]
                      },
                      "Rule": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/ObjectLockRule"
                          },
                          {
                            "description": "Specifies the Object Lock rule for the specified object. Enable the this rule when you apply <code>ObjectLockConfiguration</code> to a bucket. Bucket settings require both a mode and a period. The period can be either <code>Days</code> or <code>Years</code> but you must select one. You cannot specify <code>Days</code> and <code>Years</code> at the same time."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "operationId": "ListBuckets",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTServiceGET.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListBucketsOutput"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#uploads": {
      "get": {
        "operationId": "ListMultipartUploads",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadListMPUpload.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListMultipartUploadsOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delimiter",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encoding-type",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string",
              "enum": [
                "url"
              ],
              "description": ""
            }
          },
          {
            "name": "key-marker",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max-uploads",
            "in": "query",
            "required": false,
            "description": "Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upload-id-marker",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxUploads",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination limit",
            "required": false
          },
          {
            "name": "KeyMarker",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination token",
            "required": false
          },
          {
            "name": "UploadIdMarker",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination token",
            "required": false
          },
          {
            "name": "uploads",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            },
            "allowEmptyValue": true
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#versions": {
      "get": {
        "operationId": "ListObjectVersions",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETVersion.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListObjectVersionsOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "The bucket name that contains the objects. ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delimiter",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encoding-type",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string",
              "enum": [
                "url"
              ],
              "description": ""
            }
          },
          {
            "name": "key-marker",
            "in": "query",
            "required": false,
            "description": "Specifies the key to start with when listing objects in a bucket.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max-keys",
            "in": "query",
            "required": false,
            "description": "S",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version-id-marker",
            "in": "query",
            "required": false,
            "description": "Specifies the object version you want to start listing from.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxKeys",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination limit",
            "required": false
          },
          {
            "name": "KeyMarker",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination token",
            "required": false
          },
          {
            "name": "VersionIdMarker",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination token",
            "required": false
          },
          {
            "name": "versions",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            },
            "allowEmptyValue": true
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}#list-type=2": {
      "get": {
        "operationId": "ListObjectsV2",
        "description": "",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListObjectsV2Output"
                }
              }
            }
          },
          "480": {
            "description": "NoSuchBucket",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NoSuchBucket"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delimiter",
            "in": "query",
            "required": false,
            "description": "A delimiter is a character you use to group keys.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encoding-type",
            "in": "query",
            "required": false,
            "description": "Encoding type used by Amazon S3 to encode object keys in the response.",
            "schema": {
              "type": "string",
              "enum": [
                "url"
              ],
              "description": ""
            }
          },
          {
            "name": "max-keys",
            "in": "query",
            "required": false,
            "description": "Sets the maximum number of keys returned in the response. By default the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "description": "Limits the response to keys that begin with the specified prefix.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "continuation-token",
            "in": "query",
            "required": false,
            "description": "ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fetch-owner",
            "in": "query",
            "required": false,
            "description": "The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "start-after",
            "in": "query",
            "required": false,
            "description": "StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxKeys",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination limit",
            "required": false
          },
          {
            "name": "ContinuationToken",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination token",
            "required": false
          },
          {
            "name": "list-type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "2"
              ]
            }
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#partNumber&uploadId": {
      "put": {
        "operationId": "UploadPart",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadUploadPart.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UploadPartOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Length",
            "in": "header",
            "required": false,
            "description": "Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Content-MD5",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-sdk-checksum-algorithm",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string",
              "enum": [
                "CRC32",
                "CRC32C",
                "SHA1",
                "SHA256"
              ]
            }
          },
          {
            "name": "x-amz-checksum-crc32",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-checksum-crc32c",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-checksum-sha1",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-checksum-sha256",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the multipart upload was initiated.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "partNumber",
            "in": "query",
            "required": true,
            "description": "Part number of part being uploaded. This is a positive integer between 1 and 10,000.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "uploadId",
            "in": "query",
            "required": true,
            "description": "Upload ID identifying the multipart upload whose part is being uploaded.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "Body": {
                    "description": "Object data.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ]
    },
    "/{Bucket}/{Key}#x-amz-copy-source&partNumber&uploadId": {
      "put": {
        "operationId": "UploadPartCopy",
        "description": "",
        "externalDocs": {
          "url": "http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadUploadPartCopy.html"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UploadPartCopyOutput"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Bucket",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-copy-source",
            "in": "header",
            "required": true,
            "description": "",
            "schema": {
              "type": "string",
              "pattern": "\\/.+\\/.+"
            }
          },
          {
            "name": "x-amz-copy-source-if-match",
            "in": "header",
            "required": false,
            "description": "Copies the object if its entity tag (ETag) matches the specified tag.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-copy-source-if-modified-since",
            "in": "header",
            "required": false,
            "description": "Copies the object if it has been modified since the specified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "x-amz-copy-source-if-none-match",
            "in": "header",
            "required": false,
            "description": "Copies the object if its entity tag (ETag) is different than the specified ETag.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-amz-copy-source-if-unmodified-since",
            "in": "header",
            "required": false,
            "description": "Copies the object if it hasn't been modified since the specified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "x-amz-copy-source-range",
            "in": "header",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Key",
            "in": "path",
            "required": true,
            "description": "Object key for which the multipart upload was initiated.",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "partNumber",
            "in": "query",
            "required": true,
            "description": "Part number of part being copied. This is a positive integer between 1 and 10,000.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "uploadId",
            "in": "query",
            "required": true,
            "description": "Upload ID identifying the multipart upload whose part is being copied.",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/x-amz-security-token"
        }
      ]
    }
  },
  "components": {
    "parameters": {
      "x-amz-security-token": {
        "name": "x-amz-security-token",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "hmac": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Amazon S3 signature",
        "x-amazon-apigateway-authtype": "awsS3"
      }
    },
    "schemas": {
      "AbortMultipartUploadOutput": {
        "type": "object",
        "example": {},
        "properties": {}
      },
      "NoSuchUpload": {},
      "CompleteMultipartUploadOutput": {
        "type": "object",
        "example": {
          "Bucket": "acexamplebucket",
          "ETag": "\"4d9031c7644d8081c2829f4ea23c55f7-2\"",
          "Key": "bigobject",
          "Location": "https://examplebucket.s3.<Region>.amazonaws.com/bigobject"
        },
        "properties": {
          "Location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              },
              {
                "description": "The URI that identifies the newly created object."
              }
            ]
          },
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BucketName"
              },
              {
                "description": ""
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectKey"
              },
              {
                "description": "The object key of the newly created object."
              }
            ]
          },
          "ETag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ETag"
              },
              {
                "description": ""
              }
            ]
          },
          "ChecksumCRC32": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32"
              },
              {
                "description": "The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumCRC32C": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32C"
              },
              {
                "description": "The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumSHA1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA1"
              },
              {
                "description": ""
              }
            ]
          },
          "ChecksumSHA256": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA256"
              },
              {
                "description": ""
              }
            ]
          }
        }
      },
      "CompletedPartList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CompletedPart"
        },
        "xml": {
          "wrapped": false
        }
      },
      "CopyObjectOutput": {
        "type": "object",
        "example": {
          "CopyObjectResult": {
            "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
            "LastModified": "2016-12-15T17:38:53.000Z"
          }
        },
        "properties": {
          "CopyObjectResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CopyObjectResult"
              },
              {
                "description": "Container for all response elements."
              }
            ]
          }
        }
      },
      "MetadataValue": {
        "type": "string"
      },
      "ObjectNotInActiveTierError": {},
      "BucketLocationConstraint": {
        "type": "string",
        "enum": [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ca-central-1",
          "cn-north-1",
          "cn-northwest-1",
          "EU",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "sa-east-1",
          "us-east-2",
          "us-gov-east-1",
          "us-gov-west-1",
          "us-west-1",
          "us-west-2"
        ]
      },
      "BucketAlreadyExists": {},
      "BucketAlreadyOwnedByYou": {},
      "CreateMultipartUploadOutput": {
        "type": "object",
        "example": {
          "Bucket": "examplebucket",
          "Key": "largeobject",
          "UploadId": "ibZBv_75gd9r8lH_gqXatLdxMVpAlj6ZQjEs.OwyF3953YdwbcQnMA2BLGn8Lx12fQNICtMw5KyteFeHw.Sjng--"
        },
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BucketName"
              },
              {
                "description": "<p>The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used.</p> <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html\">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p> <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <code> <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>. When using this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html\">Using Amazon S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>"
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectKey"
              },
              {
                "description": "Object key for which the multipart upload was initiated."
              }
            ]
          },
          "UploadId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MultipartUploadId"
              },
              {
                "description": "ID for the initiated multipart upload."
              }
            ]
          }
        }
      },
      "DeleteObjectOutput": {
        "type": "object",
        "example": {},
        "properties": {}
      },
      "DeleteObjectTaggingOutput": {
        "type": "object",
        "example": {
          "VersionId": "ydlaNkwWm0SfKJR.T1b1fIdPRbldTYRI"
        },
        "properties": {}
      },
      "DeleteObjectsOutput": {
        "type": "object",
        "example": {
          "Deleted": [
            {
              "Key": "HappyFace.jpg",
              "VersionId": "yoz3HB.ZhCS_tKVEmIOr7qYyyAaZSKVd"
            },
            {
              "Key": "HappyFace.jpg",
              "VersionId": "2LWg7lQLnY41.maGB5Z6SWW.dcq0vx7b"
            }
          ]
        },
        "properties": {
          "Deleted": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeletedObjects"
              },
              {
                "description": "Container element for a successful delete. It identifies the object that was successfully deleted."
              }
            ]
          },
          "Errors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Errors"
              },
              {
                "xml": {
                  "name": "Error"
                },
                "description": "Container for a failed delete action that describes the object that Amazon S3 attempted to delete and the error it encountered."
              }
            ]
          }
        }
      },
      "ObjectIdentifierList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ObjectIdentifier"
        },
        "xml": {
          "wrapped": false
        }
      },
      "Quiet": {
        "type": "boolean"
      },
      "GetBucketVersioningOutput": {
        "type": "object",
        "example": {
          "MFADelete": "Disabled",
          "Status": "Enabled"
        },
        "properties": {
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BucketVersioningStatus"
              },
              {
                "description": "The versioning state of the bucket."
              }
            ]
          }
        }
      },
      "GetObjectOutput": {
        "type": "object",
        "example": {
          "AcceptRanges": "bytes",
          "ContentLength": "10",
          "ContentRange": "bytes 0-9/43",
          "ContentType": "text/plain",
          "ETag": "\"0d94420ffd0bc68cd3d152506b97a9cc\"",
          "LastModified": "Thu, 09 Oct 2014 22:57:28 GMT",
          "Metadata": {},
          "VersionId": "null"
        },
        "properties": {
          "Body": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Body"
              },
              {
                "description": "Object data."
              }
            ]
          },
          "Metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              },
              {
                "xml": {
                  "name": "x-amz-meta-"
                },
                "description": "A map of metadata to store with the object in S3."
              }
            ]
          }
        }
      },
      "NoSuchKey": {},
      "InvalidObjectState": {},
      "GetObjectAttributesOutput": {
        "type": "object",
        "properties": {
          "ETag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ETag"
              },
              {
                "description": "An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL."
              }
            ]
          },
          "Checksum": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Checksum"
              },
              {
                "description": "The checksum or digest of the object."
              }
            ]
          },
          "ObjectParts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetObjectAttributesParts"
              },
              {
                "description": "A collection of parts associated with a multipart upload."
              }
            ]
          },
          "StorageClass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageClass"
              },
              {
                "description": "<p>Provides the storage class information of the object. Amazon S3 returns this header for all objects except for S3 Standard storage class objects.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html\">Storage Classes</a>.</p>"
              }
            ]
          },
          "ObjectSize": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectSize"
              },
              {
                "description": "The size of the object in bytes."
              }
            ]
          }
        }
      },
      "ObjectAttributes": {
        "type": "string",
        "enum": [
          "ETag",
          "Checksum",
          "ObjectParts",
          "StorageClass",
          "ObjectSize"
        ]
      },
      "GetObjectLockConfigurationOutput": {
        "type": "object",
        "properties": {
          "ObjectLockConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectLockConfiguration"
              },
              {
                "description": "The specified bucket's Object Lock configuration."
              }
            ]
          }
        }
      },
      "NoSuchBucket": {},
      "HeadObjectOutput": {
        "type": "object",
        "example": {
          "AcceptRanges": "bytes",
          "ContentLength": "3191",
          "ContentType": "image/jpeg",
          "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
          "LastModified": "Thu, 15 Dec 2016 01:19:41 GMT",
          "Metadata": {},
          "VersionId": "null"
        },
        "properties": {
          "Metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              },
              {
                "xml": {
                  "name": "x-amz-meta-"
                },
                "description": "A map of metadata to store with the object in S3."
              }
            ]
          }
        }
      },
      "ListBucketsOutput": {
        "type": "object",
        "example": {
          "Buckets": [
            {
              "CreationDate": "2012-02-15T21: 03: 02.000Z",
              "Name": "examplebucket"
            },
            {
              "CreationDate": "2011-07-24T19: 33: 50.000Z",
              "Name": "examplebucket2"
            },
            {
              "CreationDate": "2010-12-17T00: 56: 49.000Z",
              "Name": "examplebucket3"
            }
          ],
          "Owner": {
            "DisplayName": "own-display-name",
            "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31"
          }
        },
        "properties": {
          "Buckets": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Buckets"
              },
              {
                "description": "The list of buckets owned by the requester."
              }
            ]
          },
          "Owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Owner"
              },
              {
                "description": "The owner of the buckets listed."
              }
            ]
          }
        }
      },
      "ListMultipartUploadsOutput": {
        "type": "object",
        "example": {
          "Bucket": "acl1",
          "IsTruncated": true,
          "KeyMarker": "",
          "MaxUploads": "2",
          "NextKeyMarker": "someobjectkey",
          "NextUploadIdMarker": "examplelo91lv1iwvWpvCiJWugw2xXLPAD7Z8cJyX9.WiIRgNrdG6Ldsn.9FtS63TCl1Uf5faTB.1U5Ckcbmdw--",
          "UploadIdMarker": "",
          "Uploads": [
            {
              "Initiated": "2014-05-01T05:40:58.000Z",
              "Initiator": {
                "DisplayName": "ownder-display-name",
                "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "Key": "JavaFile",
              "Owner": {
                "DisplayName": "mohanataws",
                "ID": "852b113e7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "StorageClass": "STANDARD",
              "UploadId": "gZ30jIqlUa.CInXklLQtSMJITdUnoZ1Y5GACB5UckOtspm5zbDMCkPF_qkfZzMiFZ6dksmcnqxJyIBvQMG9X9Q--"
            },
            {
              "Initiated": "2014-05-01T05:41:27.000Z",
              "Initiator": {
                "DisplayName": "ownder-display-name",
                "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "Key": "JavaFile",
              "Owner": {
                "DisplayName": "ownder-display-name",
                "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "StorageClass": "STANDARD",
              "UploadId": "b7tZSqIlo91lv1iwvWpvCiJWugw2xXLPAD7Z8cJyX9.WiIRgNrdG6Ldsn.9FtS63TCl1Uf5faTB.1U5Ckcbmdw--"
            }
          ]
        },
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BucketName"
              },
              {
                "description": "The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used."
              }
            ]
          },
          "KeyMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyMarker"
              },
              {
                "description": "The key at or after which the listing began."
              }
            ]
          },
          "UploadIdMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UploadIdMarker"
              },
              {
                "description": "Upload ID after which listing began."
              }
            ]
          },
          "NextKeyMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NextKeyMarker"
              },
              {
                "description": "When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request."
              }
            ]
          },
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Prefix"
              },
              {
                "description": "When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix."
              }
            ]
          },
          "Delimiter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Delimiter"
              },
              {
                "description": "Contains the delimiter you specified in the request. If you don't specify a delimiter in your request, this element is absent from the response."
              }
            ]
          },
          "NextUploadIdMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NextUploadIdMarker"
              },
              {
                "description": "When a list is truncated, this element specifies the value that should be used for the <code>upload-id-marker</code> request parameter in a subsequent request."
              }
            ]
          },
          "MaxUploads": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaxUploads"
              },
              {
                "description": "Maximum number of multipart uploads that could have been included in the response."
              }
            ]
          },
          "IsTruncated": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IsTruncated"
              },
              {
                "description": "Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads."
              }
            ]
          },
          "Uploads": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MultipartUploadList"
              },
              {
                "xml": {
                  "name": "Upload"
                },
                "description": "Container for elements related to a particular multipart upload. A response can contain zero or more <code>Upload</code> elements."
              }
            ]
          },
          "CommonPrefixes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommonPrefixList"
              },
              {
                "description": "If you specify a delimiter in the request, then the result returns each distinct key prefix containing the delimiter in a <code>CommonPrefixes</code> element. The distinct key prefixes are returned in the <code>Prefix</code> child element."
              }
            ]
          },
          "EncodingType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncodingType"
              },
              {
                "description": "<p>Encoding type used by Amazon S3 to encode object keys in the response.</p> <p>If you specify <code>encoding-type</code> request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements:</p> <p> <code>Delimiter</code>, <code>KeyMarker</code>, <code>Prefix</code>, <code>NextKeyMarker</code>, <code>Key</code>.</p>"
              }
            ]
          }
        }
      },
      "ListObjectVersionsOutput": {
        "type": "object",
        "example": {
          "Versions": [
            {
              "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
              "IsLatest": true,
              "Key": "HappyFace.jpg",
              "LastModified": "2016-12-15T01:19:41.000Z",
              "Owner": {
                "DisplayName": "owner-display-name",
                "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "Size": 3191,
              "StorageClass": "STANDARD",
              "VersionId": "null"
            },
            {
              "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
              "IsLatest": false,
              "Key": "HappyFace.jpg",
              "LastModified": "2016-12-13T00:58:26.000Z",
              "Owner": {
                "DisplayName": "owner-display-name",
                "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "Size": 3191,
              "StorageClass": "STANDARD",
              "VersionId": "PHtexPGjH2y.zBgT8LmB7wwLI2mpbz.k"
            }
          ]
        },
        "properties": {
          "IsTruncated": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IsTruncated"
              },
              {
                "description": "A flag that indicates whether Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results."
              }
            ]
          },
          "KeyMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyMarker"
              },
              {
                "description": "Marks the last key returned in a truncated response."
              }
            ]
          },
          "VersionIdMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionIdMarker"
              },
              {
                "description": "Marks the last version of the key returned in a truncated response."
              }
            ]
          },
          "NextKeyMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NextKeyMarker"
              },
              {
                "description": "When the number of responses exceeds the value of <code>MaxKeys</code>, <code>NextKeyMarker</code> specifies the first key not returned that satisfies the search criteria. Use this value for the key-marker request parameter in a subsequent request."
              }
            ]
          },
          "NextVersionIdMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NextVersionIdMarker"
              },
              {
                "description": "When the number of responses exceeds the value of <code>MaxKeys</code>, <code>NextVersionIdMarker</code> specifies the first object version not returned that satisfies the search criteria. Use this value for the version-id-marker request parameter in a subsequent request."
              }
            ]
          },
          "Versions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectVersionList"
              },
              {
                "xml": {
                  "name": "Version"
                },
                "description": "Container for version information."
              }
            ]
          },
          "DeleteMarkers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeleteMarkers"
              },
              {
                "xml": {
                  "name": "DeleteMarker"
                },
                "description": "Container for an object that is a delete marker."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BucketName"
              },
              {
                "description": "The bucket name."
              }
            ]
          },
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Prefix"
              },
              {
                "description": "Selects objects that start with the value supplied by this parameter."
              }
            ]
          },
          "Delimiter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Delimiter"
              },
              {
                "description": "The delimiter grouping the included keys. A delimiter is a character that you specify to group keys. All keys that contain the same string between the prefix and the first occurrence of the delimiter are grouped under a single result element in <code>CommonPrefixes</code>. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response."
              }
            ]
          },
          "MaxKeys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaxKeys"
              },
              {
                "description": "Specifies the maximum number of objects to return."
              }
            ]
          },
          "CommonPrefixes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommonPrefixList"
              },
              {
                "description": "All of the keys rolled up into a common prefix count as a single return when calculating the number of returns."
              }
            ]
          },
          "EncodingType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncodingType"
              },
              {
                "description": "<p> Encoding type used by Amazon S3 to encode object key names in the XML response.</p> <p>If you specify encoding-type request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements:</p> <p> <code>KeyMarker, NextKeyMarker, Prefix, Key</code>, and <code>Delimiter</code>.</p>"
              }
            ]
          }
        }
      },
      "ListObjectsOutput": {
        "type": "object",
        "example": {
          "Contents": [
            {
              "ETag": "\"70ee1738b6b21e2c8a43f3a5ab0eee71\"",
              "Key": "example1.jpg",
              "LastModified": "2014-11-21T19:40:05.000Z",
              "Owner": {
                "DisplayName": "myname",
                "ID": "12345example25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "Size": 11,
              "StorageClass": "STANDARD"
            },
            {
              "ETag": "\"9c8af9a76df052144598c115ef33e511\"",
              "Key": "example2.jpg",
              "LastModified": "2013-11-15T01:10:49.000Z",
              "Owner": {
                "DisplayName": "myname",
                "ID": "12345example25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
              },
              "Size": 713193,
              "StorageClass": "STANDARD"
            }
          ],
          "NextMarker": "eyJNYXJrZXIiOiBudWxsLCAiYm90b190cnVuY2F0ZV9hbW91bnQiOiAyfQ=="
        },
        "properties": {
          "IsTruncated": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IsTruncated"
              },
              {
                "description": "A flag that indicates whether Amazon S3 returned all of the results that satisfied the search criteria."
              }
            ]
          },
          "Marker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Marker"
              },
              {
                "description": "Indicates where in the bucket listing begins. Marker is included in the response if it was sent with the request."
              }
            ]
          },
          "NextMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NextMarker"
              },
              {
                "description": "When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMarker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys."
              }
            ]
          },
          "Contents": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectList"
              },
              {
                "description": "Metadata about each object returned."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BucketName"
              },
              {
                "description": "The bucket name."
              }
            ]
          },
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Prefix"
              },
              {
                "description": "Keys that begin with the indicated prefix."
              }
            ]
          },
          "Delimiter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Delimiter"
              },
              {
                "description": "Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element in the <code>CommonPrefixes</code> collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up result counts as only one return against the <code>MaxKeys</code> value."
              }
            ]
          },
          "MaxKeys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaxKeys"
              },
              {
                "description": "The maximum number of keys returned in the response body."
              }
            ]
          },
          "CommonPrefixes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommonPrefixList"
              },
              {
                "description": "<p>All of the keys (up to 1,000) rolled up in a common prefix count as a single return when calculating the number of returns. </p> <p>A response can contain CommonPrefixes only if you specify a delimiter.</p> <p>CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by the delimiter.</p> <p> CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix.</p> <p>For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. All of the keys that roll up into a common prefix count as a single return when calculating the number of returns.</p>"
              }
            ]
          },
          "EncodingType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncodingType"
              },
              {
                "description": "Encoding type used by Amazon S3 to encode object keys in the response."
              }
            ]
          }
        }
      },
      "ListObjectsV2Output": {
        "type": "object",
        "example": {
          "Contents": [
            {
              "ETag": "\"70ee1738b6b21e2c8a43f3a5ab0eee71\"",
              "Key": "happyface.jpg",
              "LastModified": "2014-11-21T19:40:05.000Z",
              "Size": 11,
              "StorageClass": "STANDARD"
            },
            {
              "ETag": "\"becf17f89c30367a9a44495d62ed521a-1\"",
              "Key": "test.jpg",
              "LastModified": "2014-05-02T04:51:50.000Z",
              "Size": 4192256,
              "StorageClass": "STANDARD"
            }
          ],
          "IsTruncated": true,
          "KeyCount": "2",
          "MaxKeys": "2",
          "Name": "examplebucket",
          "NextContinuationToken": "1w41l63U0xa8q7smH50vCxyTQqdxo69O3EmK28Bi5PcROI4wI/EyIJg==",
          "Prefix": ""
        },
        "properties": {
          "IsTruncated": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IsTruncated"
              },
              {
                "description": "Set to false if all of the results were returned. Set to true if more keys are available to return. If the number of results exceeds that specified by MaxKeys, all of the results might not be returned."
              }
            ]
          },
          "Contents": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectList"
              },
              {
                "description": "Metadata about each object returned."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BucketName"
              },
              {
                "description": "<p>The bucket name.</p> <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html\">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p> <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <code> <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>. When using this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html\">Using Amazon S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>"
              }
            ]
          },
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Prefix"
              },
              {
                "description": " Keys that begin with the indicated prefix."
              }
            ]
          },
          "Delimiter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Delimiter"
              },
              {
                "description": "Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element in the CommonPrefixes collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up result counts as only one return against the <code>MaxKeys</code> value."
              }
            ]
          },
          "MaxKeys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaxKeys"
              },
              {
                "description": "Sets the maximum number of keys returned in the response. By default the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more."
              }
            ]
          },
          "CommonPrefixes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommonPrefixList"
              },
              {
                "description": "<p>All of the keys (up to 1,000) rolled up into a common prefix count as a single return when calculating the number of returns.</p> <p>A response can contain <code>CommonPrefixes</code> only if you specify a delimiter.</p> <p> <code>CommonPrefixes</code> contains all (if there are any) keys between <code>Prefix</code> and the next occurrence of the string specified by a delimiter.</p> <p> <code>CommonPrefixes</code> lists keys that act like subdirectories in the directory specified by <code>Prefix</code>.</p> <p>For example, if the prefix is <code>notes/</code> and the delimiter is a slash (<code>/</code>) as in <code>notes/summer/july</code>, the common prefix is <code>notes/summer/</code>. All of the keys that roll up into a common prefix count as a single return when calculating the number of returns. </p>"
              }
            ]
          },
          "EncodingType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncodingType"
              },
              {
                "description": "<p>Encoding type used by Amazon S3 to encode object key names in the XML response.</p> <p>If you specify the encoding-type request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements:</p> <p> <code>Delimiter, Prefix, Key,</code> and <code>StartAfter</code>.</p>"
              }
            ]
          },
          "KeyCount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyCount"
              },
              {
                "description": "KeyCount is the number of keys returned with this request. KeyCount will always be less than or equals to MaxKeys field. Say you ask for 50 keys, your result will include less than equals 50 keys "
              }
            ]
          },
          "ContinuationToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Token"
              },
              {
                "description": " If ContinuationToken was sent with the request, it is included in the response."
              }
            ]
          },
          "NextContinuationToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NextToken"
              },
              {
                "description": " <code>NextContinuationToken</code> is sent when <code>isTruncated</code> is true, which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this <code>NextContinuationToken</code>. <code>NextContinuationToken</code> is obfuscated and is not a real key"
              }
            ]
          },
          "StartAfter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StartAfter"
              },
              {
                "description": "If StartAfter was sent with the request, it is included in the response."
              }
            ]
          }
        }
      },
      "ListPartsOutput": {
        "type": "object",
        "example": {
          "Initiator": {
            "DisplayName": "owner-display-name",
            "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
          },
          "Owner": {
            "DisplayName": "owner-display-name",
            "ID": "examplee7a2f25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc"
          },
          "Parts": [
            {
              "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\"",
              "LastModified": "2016-12-16T00:11:42.000Z",
              "PartNumber": "1",
              "Size": 26246026
            },
            {
              "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\"",
              "LastModified": "2016-12-16T00:15:01.000Z",
              "PartNumber": "2",
              "Size": 26246026
            }
          ],
          "StorageClass": "STANDARD"
        },
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BucketName"
              },
              {
                "description": "The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used."
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectKey"
              },
              {
                "description": "Object key for which the multipart upload was initiated."
              }
            ]
          },
          "UploadId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MultipartUploadId"
              },
              {
                "description": "Upload ID identifying the multipart upload whose parts are being listed."
              }
            ]
          },
          "PartNumberMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartNumberMarker"
              },
              {
                "description": "When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request."
              }
            ]
          },
          "NextPartNumberMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NextPartNumberMarker"
              },
              {
                "description": "When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request."
              }
            ]
          },
          "MaxParts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaxParts"
              },
              {
                "description": "Maximum number of parts that were allowed in the response."
              }
            ]
          },
          "IsTruncated": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IsTruncated"
              },
              {
                "description": " Indicates whether the returned list of parts is truncated. A true value indicates that the list was truncated. A list can be truncated if the number of parts exceeds the limit returned in the MaxParts element."
              }
            ]
          },
          "Parts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Parts"
              },
              {
                "xml": {
                  "name": "Part"
                },
                "description": " Container for elements related to a particular part. A response can contain zero or more <code>Part</code> elements."
              }
            ]
          },
          "Initiator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Initiator"
              },
              {
                "description": "Container element that identifies who initiated the multipart upload. If the initiator is an Amazon Web Services account, this element provides the same information as the <code>Owner</code> element. If the initiator is an IAM User, this element provides the user ARN and display name."
              }
            ]
          },
          "Owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Owner"
              },
              {
                "description": " Container element that identifies the object owner, after the object is created. If multipart upload is initiated by an IAM user, this element provides the parent account ID and display name."
              }
            ]
          },
          "StorageClass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageClass"
              },
              {
                "description": "Class of storage (STANDARD or REDUCED_REDUNDANCY) used to store the uploaded object."
              }
            ]
          },
          "ChecksumAlgorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumAlgorithm"
              },
              {
                "description": "The algorithm that was used to create a checksum of the object."
              }
            ]
          }
        }
      },
      "Owner": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayName"
              },
              {
                "description": "Container for the display name of the owner."
              }
            ]
          },
          "ID": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ID"
              },
              {
                "description": "Container for the ID of the owner."
              }
            ]
          }
        },
        "description": "Container for the owner's display name and ID."
      },
      "IsEnabled": {
        "type": "boolean"
      },
      "Role": {
        "type": "string"
      },
      "MFADelete": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ]
      },
      "BucketVersioningStatus": {
        "type": "string",
        "enum": [
          "Enabled",
          "Suspended"
        ]
      },
      "PutObjectOutput": {
        "type": "object",
        "example": {
          "ETag": "\"6805f2cfc46c0f04559748bb039d69ae\"",
          "VersionId": "Bvq0EDKxOcXLJXNo_Lkz37eM3R4pfzyQ"
        },
        "properties": {}
      },
      "PutObjectLockConfigurationOutput": {
        "type": "object",
        "properties": {}
      },
      "ObjectLockEnabled": {
        "type": "string",
        "enum": [
          "Enabled"
        ]
      },
      "ObjectLockRule": {
        "type": "object",
        "properties": {
          "DefaultRetention": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultRetention"
              },
              {
                "description": "The default Object Lock retention mode and period that you want to apply to new objects placed in the specified bucket. Bucket settings require both a mode and a period. The period can be either <code>Days</code> or <code>Years</code> but you must select one. You cannot specify <code>Days</code> and <code>Years</code> at the same time."
              }
            ]
          }
        },
        "description": "The container element for an Object Lock rule."
      },
      "ObjectLockRetentionMode": {
        "type": "string",
        "enum": [
          "GOVERNANCE",
          "COMPLIANCE"
        ]
      },
      "Date": {
        "type": "string",
        "format": "date-time"
      },
      "Setting": {
        "type": "boolean"
      },
      "Days": {
        "type": "integer"
      },
      "Description": {
        "type": "string"
      },
      "SelectParameters": {
        "type": "object",
        "required": [
          "InputSerialization",
          "ExpressionType",
          "Expression",
          "OutputSerialization"
        ],
        "properties": {
          "InputSerialization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputSerialization"
              },
              {
                "description": "Describes the serialization format of the object."
              }
            ]
          },
          "ExpressionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpressionType"
              },
              {
                "description": "The type of the provided expression (for example, SQL)."
              }
            ]
          },
          "Expression": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Expression"
              },
              {
                "description": "The expression that is used to query the object."
              }
            ]
          },
          "OutputSerialization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutputSerialization"
              },
              {
                "description": "Describes how the results of the Select job are serialized."
              }
            ]
          }
        },
        "description": "Describes the parameters for Select job types."
      },
      "EnableRequestProgress": {
        "type": "boolean"
      },
      "CSVInput": {
        "type": "object",
        "properties": {
          "FileHeaderInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileHeaderInfo"
              },
              {
                "description": "<p>Describes the first line of input. Valid values are:</p> <ul> <li> <p> <code>NONE</code>: First line is not a header.</p> </li> <li> <p> <code>IGNORE</code>: First line is a header, but you can't use the header values to indicate the column in an expression. You can use column position (such as _1, _2, …) to indicate the column (<code>SELECT s._1 FROM OBJECT s</code>).</p> </li> <li> <p> <code>Use</code>: First line is a header, and you can use the header value to identify a column in an expression (<code>SELECT \"name\" FROM OBJECT</code>). </p> </li> </ul>"
              }
            ]
          },
          "Comments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Comments"
              },
              {
                "description": "A single character used to indicate that a row should be ignored when the character is present at the start of that row. You can specify any character to indicate a comment line."
              }
            ]
          },
          "QuoteEscapeCharacter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuoteEscapeCharacter"
              },
              {
                "description": "A single character used for escaping the quotation mark character inside an already escaped value. For example, the value <code>\"\"\" a , b \"\"\"</code> is parsed as <code>\" a , b \"</code>."
              }
            ]
          },
          "RecordDelimiter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecordDelimiter"
              },
              {
                "description": "A single character used to separate individual records in the input. Instead of the default value, you can specify an arbitrary delimiter."
              }
            ]
          },
          "FieldDelimiter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldDelimiter"
              },
              {
                "description": "A single character used to separate individual fields in a record. You can specify an arbitrary delimiter."
              }
            ]
          },
          "QuoteCharacter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuoteCharacter"
              },
              {
                "description": "<p>A single character used for escaping when the field delimiter is part of the value. For example, if the value is <code>a, b</code>, Amazon S3 wraps this field value in quotation marks, as follows: <code>\" a , b \"</code>.</p> <p>Type: String</p> <p>Default: <code>\"</code> </p> <p>Ancestors: <code>CSV</code> </p>"
              }
            ]
          },
          "AllowQuotedRecordDelimiter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AllowQuotedRecordDelimiter"
              },
              {
                "description": "Specifies that CSV field values may contain quoted record delimiters and such records should be allowed. Default value is FALSE. Setting this value to TRUE may lower performance."
              }
            ]
          }
        },
        "description": "Describes how an uncompressed comma-separated values (CSV)-formatted input object is formatted."
      },
      "CompressionType": {
        "type": "string",
        "enum": [
          "NONE",
          "GZIP",
          "BZIP2"
        ]
      },
      "JSONInput": {
        "type": "object",
        "properties": {
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JSONType"
              },
              {
                "description": "The type of JSON. Valid values: Document, Lines."
              }
            ]
          }
        },
        "description": "Specifies JSON as object's input serialization format."
      },
      "ParquetInput": {
        "type": "object",
        "properties": {},
        "description": "Container for Parquet."
      },
      "CSVOutput": {
        "type": "object",
        "properties": {
          "QuoteFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuoteFields"
              },
              {
                "description": "<p>Indicates whether to use quotation marks around output fields. </p> <ul> <li> <p> <code>ALWAYS</code>: Always use quotation marks for output fields.</p> </li> <li> <p> <code>ASNEEDED</code>: Use quotation marks for output fields when needed.</p> </li> </ul>"
              }
            ]
          },
          "QuoteEscapeCharacter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuoteEscapeCharacter"
              },
              {
                "description": "The single character used for escaping the quote character inside an already escaped value."
              }
            ]
          },
          "RecordDelimiter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecordDelimiter"
              },
              {
                "description": "A single character used to separate individual records in the output. Instead of the default value, you can specify an arbitrary delimiter."
              }
            ]
          },
          "FieldDelimiter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldDelimiter"
              },
              {
                "description": "The value used to separate individual fields in a record. You can specify an arbitrary delimiter."
              }
            ]
          },
          "QuoteCharacter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuoteCharacter"
              },
              {
                "description": "A single character used for escaping when the field delimiter is part of the value. For example, if the value is <code>a, b</code>, Amazon S3 wraps this field value in quotation marks, as follows: <code>\" a , b \"</code>."
              }
            ]
          }
        },
        "description": "Describes how uncompressed comma-separated values (CSV)-formatted results are formatted."
      },
      "JSONOutput": {
        "type": "object",
        "properties": {
          "RecordDelimiter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecordDelimiter"
              },
              {
                "description": "The value used to separate individual records in the output. If no value is specified, Amazon S3 uses a newline character ('\\n')."
              }
            ]
          }
        },
        "description": "Specifies JSON as request's output serialization format."
      },
      "Start": {
        "type": "integer"
      },
      "End": {
        "type": "integer"
      },
      "UploadPartOutput": {
        "type": "object",
        "example": {
          "ETag": "\"d8c2eafd90c266e19ab9dcacc479f8af\""
        },
        "properties": {}
      },
      "UploadPartCopyOutput": {
        "type": "object",
        "example": {
          "CopyPartResult": {
            "ETag": "\"b0c6f0e7e054ab8fa2536a2677f8734d\"",
            "LastModified": "2016-12-29T21:24:43.000Z"
          }
        },
        "properties": {
          "CopyPartResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CopyPartResult"
              },
              {
                "description": "Container for all response elements."
              }
            ]
          }
        }
      },
      "BucketName": {
        "type": "string"
      },
      "ObjectKey": {
        "type": "string",
        "minLength": 1
      },
      "MultipartUploadId": {
        "type": "string"
      },
      "AccountId": {
        "type": "string"
      },
      "AcceptRanges": {
        "type": "string"
      },
      "OwnerOverride": {
        "type": "string",
        "enum": [
          "Destination"
        ]
      },
      "AllowQuotedRecordDelimiter": {
        "type": "boolean"
      },
      "AllowedHeader": {
        "type": "string"
      },
      "AllowedHeaders": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AllowedHeader"
        },
        "xml": {
          "wrapped": false
        }
      },
      "AllowedMethod": {
        "type": "string"
      },
      "AllowedMethods": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AllowedMethod"
        },
        "xml": {
          "wrapped": false
        }
      },
      "AllowedOrigin": {
        "type": "string"
      },
      "AllowedOrigins": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AllowedOrigin"
        },
        "xml": {
          "wrapped": false
        }
      },
      "Prefix": {
        "type": "string"
      },
      "Body": {
        "type": "string"
      },
      "CreationDate": {
        "type": "string",
        "format": "date-time"
      },
      "Bucket": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BucketName"
              },
              {
                "description": "The name of the bucket."
              }
            ]
          },
          "CreationDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreationDate"
              },
              {
                "description": "Date the bucket was created. This date can change when making changes to your bucket, such as editing its bucket policy."
              }
            ]
          }
        },
        "description": " In terms of implementation, a Bucket is a resource. An Amazon S3 bucket name is globally unique, and the namespace is shared by all Amazon Web Services accounts. "
      },
      "BucketKeyEnabled": {
        "type": "boolean"
      },
      "Buckets": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Bucket"
            },
            {
              "xml": {
                "name": "Bucket"
              }
            }
          ]
        }
      },
      "BytesProcessed": {
        "type": "integer"
      },
      "BytesReturned": {
        "type": "integer"
      },
      "BytesScanned": {
        "type": "integer"
      },
      "ID": {
        "type": "string"
      },
      "ExposeHeaders": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ExposeHeader"
        },
        "xml": {
          "wrapped": false
        }
      },
      "MaxAgeSeconds": {
        "type": "integer"
      },
      "FileHeaderInfo": {
        "type": "string",
        "enum": [
          "USE",
          "IGNORE",
          "NONE"
        ]
      },
      "Comments": {
        "type": "string"
      },
      "QuoteEscapeCharacter": {
        "type": "string"
      },
      "RecordDelimiter": {
        "type": "string"
      },
      "FieldDelimiter": {
        "type": "string"
      },
      "QuoteCharacter": {
        "type": "string"
      },
      "QuoteFields": {
        "type": "string",
        "enum": [
          "ALWAYS",
          "ASNEEDED"
        ]
      },
      "CacheControl": {
        "type": "string"
      },
      "ChecksumCRC32": {
        "type": "string"
      },
      "ChecksumCRC32C": {
        "type": "string"
      },
      "ChecksumSHA1": {
        "type": "string"
      },
      "ChecksumSHA256": {
        "type": "string"
      },
      "Checksum": {
        "type": "object",
        "properties": {
          "ChecksumCRC32": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32"
              },
              {
                "description": "The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumCRC32C": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32C"
              },
              {
                "description": "The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumSHA1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA1"
              },
              {
                "description": "The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumSHA256": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA256"
              },
              {
                "description": "The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          }
        },
        "description": "Contains all the possible checksum or digest values for an object."
      },
      "ChecksumAlgorithm": {
        "type": "string",
        "enum": [
          "CRC32",
          "CRC32C",
          "SHA1",
          "SHA256"
        ]
      },
      "ChecksumAlgorithmList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ChecksumAlgorithm"
        },
        "xml": {
          "wrapped": false
        }
      },
      "ChecksumMode": {
        "type": "string",
        "enum": [
          "ENABLED"
        ]
      },
      "Code": {
        "type": "string"
      },
      "CommonPrefix": {
        "type": "object",
        "properties": {
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Prefix"
              },
              {
                "description": "Container for the specified common prefix."
              }
            ]
          }
        },
        "description": "Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. "
      },
      "CommonPrefixList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CommonPrefix"
        },
        "xml": {
          "wrapped": false
        }
      },
      "Location": {
        "type": "string"
      },
      "Expiration": {
        "type": "string"
      },
      "ETag": {
        "type": "string"
      },
      "ObjectVersionId": {
        "type": "string"
      },
      "CompletedMultipartUpload": {
        "type": "object",
        "properties": {
          "Parts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompletedPartList"
              },
              {
                "xml": {
                  "name": "Part"
                },
                "description": "<p>Array of CompletedPart data types.</p> <p>If you do not supply a valid <code>Part</code> with your request, the service sends back an HTTP 400 response.</p>"
              }
            ]
          }
        },
        "description": "The container for the completed multipart upload details."
      },
      "CompleteMultipartUploadRequest": {
        "type": "object",
        "title": "CompleteMultipartUploadRequest",
        "properties": {
          "MultipartUpload": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompletedMultipartUpload"
              },
              {
                "xml": {
                  "name": "CompleteMultipartUpload"
                },
                "description": "The container for the multipart upload request information."
              }
            ]
          }
        },
        "xml": {
          "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
        }
      },
      "PartNumber": {
        "type": "integer"
      },
      "CompletedPart": {
        "type": "object",
        "properties": {
          "ETag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ETag"
              },
              {
                "description": "Entity tag returned when the part was uploaded."
              }
            ]
          },
          "ChecksumCRC32": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32"
              },
              {
                "description": "The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumCRC32C": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32C"
              },
              {
                "description": "The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumSHA1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA1"
              },
              {
                "description": "The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumSHA256": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA256"
              },
              {
                "description": "The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "PartNumber": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartNumber"
              },
              {
                "description": "Part number that identifies the part. This is a positive integer between 1 and 10,000."
              }
            ]
          }
        },
        "description": "Details of the parts that were uploaded."
      },
      "KeyPrefixEquals": {
        "type": "string"
      },
      "ConfirmRemoveSelfBucketAccess": {
        "type": "boolean"
      },
      "ContentDisposition": {
        "type": "string"
      },
      "ContentEncoding": {
        "type": "string"
      },
      "ContentLanguage": {
        "type": "string"
      },
      "ContentLength": {
        "type": "integer"
      },
      "ContentMD5": {
        "type": "string"
      },
      "ContentRange": {
        "type": "string"
      },
      "ContentType": {
        "type": "string"
      },
      "ContinuationEvent": {
        "type": "object",
        "properties": {},
        "description": "<p/>"
      },
      "CopyObjectResult": {
        "type": "object",
        "properties": {
          "ETag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ETag"
              },
              {
                "description": "Returns the ETag of the new object. The ETag reflects only changes to the contents of an object, not its metadata."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastModified"
              },
              {
                "description": "Creation date of the object."
              }
            ]
          },
          "ChecksumCRC32": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32"
              },
              {
                "description": ""
              }
            ]
          },
          "ChecksumCRC32C": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32C"
              },
              {
                "description": ""
              }
            ]
          },
          "ChecksumSHA1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA1"
              },
              {
                "description": ""
              }
            ]
          },
          "ChecksumSHA256": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA256"
              },
              {
                "description": ""
              }
            ]
          }
        },
        "description": "Container for all response elements."
      },
      "CopySourceVersionId": {
        "type": "string"
      },
      "CopySource": {
        "type": "string",
        "pattern": "\\/.+\\/.+"
      },
      "CopySourceIfMatch": {
        "type": "string"
      },
      "CopySourceIfModifiedSince": {
        "type": "string",
        "format": "date-time"
      },
      "CopySourceIfNoneMatch": {
        "type": "string"
      },
      "CopySourceIfUnmodifiedSince": {
        "type": "string",
        "format": "date-time"
      },
      "Expires": {
        "type": "string",
        "format": "date-time"
      },
      "GrantFullControl": {
        "type": "string"
      },
      "GrantRead": {
        "type": "string"
      },
      "Metadata": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/MetadataValue"
        }
      },
      "MetadataDirective": {
        "type": "string",
        "enum": [
          "COPY",
          "REPLACE"
        ]
      },
      "ObjectLockMode": {
        "type": "string",
        "enum": [
          "GOVERNANCE",
          "COMPLIANCE"
        ]
      },
      "ObjectLockRetainUntilDate": {
        "type": "string",
        "format": "date-time"
      },
      "CopyObjectRequest": {
        "type": "object",
        "title": "CopyObjectRequest",
        "properties": {
          "Metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              },
              {
                "xml": {
                  "name": "x-amz-meta-"
                },
                "description": "A map of metadata to store with the object in S3."
              }
            ]
          }
        }
      },
      "LastModified": {
        "type": "string",
        "format": "date-time"
      },
      "CopyPartResult": {
        "type": "object",
        "properties": {
          "ETag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ETag"
              },
              {
                "description": "Entity tag of the object."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastModified"
              },
              {
                "description": "Date and time at which the object was uploaded."
              }
            ]
          },
          "ChecksumCRC32": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32"
              },
              {
                "description": ""
              }
            ]
          },
          "ChecksumCRC32C": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32C"
              },
              {
                "description": ""
              }
            ]
          },
          "ChecksumSHA1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA1"
              },
              {
                "description": ""
              }
            ]
          },
          "ChecksumSHA256": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA256"
              },
              {
                "description": ""
              }
            ]
          }
        },
        "description": "Container for all response elements."
      },
      "CopySourceRange": {
        "type": "string"
      },
      "GrantWrite": {
        "type": "string"
      },
      "ObjectLockEnabledForBucket": {
        "type": "boolean"
      },
      "ObjectOwnership": {
        "type": "string",
        "enum": [
          "BucketOwnerPreferred",
          "ObjectWriter",
          "BucketOwnerEnforced"
        ],
        "description": ""
      },
      "CreateMultipartUploadRequest": {
        "type": "object",
        "title": "CreateMultipartUploadRequest",
        "properties": {
          "Metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              },
              {
                "xml": {
                  "name": "x-amz-meta-"
                },
                "description": "A map of metadata to store with the object in S3."
              }
            ]
          }
        }
      },
      "Years": {
        "type": "integer"
      },
      "DefaultRetention": {
        "type": "object",
        "properties": {
          "Mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectLockRetentionMode"
              },
              {
                "description": "The default Object Lock retention mode you want to apply to new objects placed in the specified bucket. Must be used with either <code>Days</code> or <code>Years</code>."
              }
            ]
          },
          "Days": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Days"
              },
              {
                "description": "The number of days that you want to specify for the default retention period. Must be used with <code>Mode</code>."
              }
            ]
          },
          "Years": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Years"
              },
              {
                "description": "The number of years that you want to specify for the default retention period. Must be used with <code>Mode</code>."
              }
            ]
          }
        },
        "description": "<p>The container element for specifying the default Object Lock retention settings for new objects placed in the specified bucket.</p> <note> <ul> <li> <p>The <code>DefaultRetention</code> settings require both a mode and a period.</p> </li> <li> <p>The <code>DefaultRetention</code> period can be either <code>Days</code> or <code>Years</code> but you must select one. You cannot specify <code>Days</code> and <code>Years</code> at the same time.</p> </li> </ul> </note>"
      },
      "Delete": {
        "type": "object",
        "required": [
          "Objects"
        ],
        "properties": {
          "Objects": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectIdentifierList"
              },
              {
                "xml": {
                  "name": "Object"
                },
                "description": "The objects to delete."
              }
            ]
          },
          "Quiet": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quiet"
              },
              {
                "description": "Element to enable quiet mode for the request. When you add this element, you must set its value to true."
              }
            ]
          }
        },
        "description": "Container for the objects to delete."
      },
      "DeleteMarker": {
        "type": "boolean"
      },
      "IsLatest": {
        "type": "boolean"
      },
      "DeleteMarkerEntry": {
        "type": "object",
        "properties": {
          "Owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Owner"
              },
              {
                "description": "The account that created the delete marker.&gt;"
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectKey"
              },
              {
                "description": "The object key."
              }
            ]
          },
          "VersionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectVersionId"
              },
              {
                "description": "Version ID of an object."
              }
            ]
          },
          "IsLatest": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IsLatest"
              },
              {
                "description": "Specifies whether the object is (true) or is not (false) the latest version of an object."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastModified"
              },
              {
                "description": "Date and time the object was last modified."
              }
            ]
          }
        },
        "description": "Information about the delete marker."
      },
      "DeleteMarkerVersionId": {
        "type": "string"
      },
      "DeleteMarkers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeleteMarkerEntry"
        },
        "xml": {
          "wrapped": false
        }
      },
      "DeleteObjectRequest": {
        "type": "object",
        "title": "DeleteObjectRequest",
        "properties": {}
      },
      "DeletedObjects": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeletedObject"
        },
        "xml": {
          "wrapped": false
        }
      },
      "Errors": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Error"
        },
        "xml": {
          "wrapped": false
        }
      },
      "DeleteObjectsRequest": {
        "type": "object",
        "required": [
          "Delete"
        ],
        "title": "DeleteObjectsRequest",
        "properties": {
          "Delete": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Delete"
              },
              {
                "description": "Container for the request."
              }
            ]
          }
        },
        "xml": {
          "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
        }
      },
      "DeletedObject": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectKey"
              },
              {
                "description": "The name of the deleted object."
              }
            ]
          },
          "VersionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectVersionId"
              },
              {
                "description": "The version ID of the deleted object."
              }
            ]
          },
          "DeleteMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeleteMarker"
              },
              {
                "description": "Specifies whether the versioned object that was permanently deleted was (true) or was not (false) a delete marker. In a simple DELETE, this header indicates whether (true) or not (false) a delete marker was created."
              }
            ]
          },
          "DeleteMarkerVersionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeleteMarkerVersionId"
              },
              {
                "description": "The version ID of the delete marker created as a result of the DELETE operation. If you delete a specific object version, the value returned by this header is the version ID of the object version deleted."
              }
            ]
          }
        },
        "description": "Information about the deleted object."
      },
      "Delimiter": {
        "type": "string"
      },
      "DisplayName": {
        "type": "string"
      },
      "EmailAddress": {
        "type": "string"
      },
      "EncodingType": {
        "type": "string",
        "enum": [
          "url"
        ],
        "description": ""
      },
      "EndEvent": {
        "type": "object",
        "properties": {},
        "description": ""
      },
      "Message": {
        "type": "string"
      },
      "Error": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectKey"
              },
              {
                "description": "The error key."
              }
            ]
          },
          "VersionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectVersionId"
              },
              {
                "description": "The version ID of the error."
              }
            ]
          },
          "Code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Code"
              },
              {
                "description": "<p>The error code is a string that uniquely identifies an error condition. It is meant to be read and understood by programs that detect and handle errors by type. </p> <p class=\"title\"> <b>Amazon S3 error codes</b> </p> <ul> <li> <ul> <li> <p> <i>Code:</i> AccessDenied </p> </li> <li> <p> <i>Description:</i> Access Denied</p> </li> <li> <p> <i>HTTP Status Code:</i> 403 Forbidden</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> AccountProblem</p> </li> <li> <p> <i>Description:</i> There is a problem with your Amazon Web Services account that prevents the action from completing successfully. Contact Amazon Web Services Support for further assistance.</p> </li> <li> <p> <i>HTTP Status Code:</i> 403 Forbidden</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> AllAccessDisabled</p> </li> <li> <p> <i>Description:</i> All access to this Amazon S3 resource has been disabled. Contact Amazon Web Services Support for further assistance.</p> </li> <li> <p> <i>HTTP Status Code:</i> 403 Forbidden</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> AmbiguousGrantByEmailAddress</p> </li> <li> <p> <i>Description:</i> The email address you provided is associated with more than one account.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> AuthorizationHeaderMalformed</p> </li> <li> <p> <i>Description:</i> The authorization header you provided is invalid.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>HTTP Status Code:</i> N/A</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> BadDigest</p> </li> <li> <p> <i>Description:</i> The Content-MD5 you specified did not match what we received.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> BucketAlreadyExists</p> </li> <li> <p> <i>Description:</i> The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again.</p> </li> <li> <p> <i>HTTP Status Code:</i> 409 Conflict</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> BucketAlreadyOwnedByYou</p> </li> <li> <p> <i>Description:</i> The bucket you tried to create already exists, and you own it. Amazon S3 returns this error in all Amazon Web Services Regions except in the North Virginia Region. For legacy compatibility, if you re-create an existing bucket that you already own in the North Virginia Region, Amazon S3 returns 200 OK and resets the bucket access control lists (ACLs).</p> </li> <li> <p> <i>Code:</i> 409 Conflict (in all Regions except the North Virginia Region) </p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> BucketNotEmpty</p> </li> <li> <p> <i>Description:</i> The bucket you tried to delete is not empty.</p> </li> <li> <p> <i>HTTP Status Code:</i> 409 Conflict</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> CredentialsNotSupported</p> </li> <li> <p> <i>Description:</i> This request does not support credentials.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> CrossLocationLoggingProhibited</p> </li> <li> <p> <i>Description:</i> Cross-location logging not allowed. Buckets in one geographic location cannot log information to a bucket in another location.</p> </li> <li> <p> <i>HTTP Status Code:</i> 403 Forbidden</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> EntityTooSmall</p> </li> <li> <p> <i>Description:</i> Your proposed upload is smaller than the minimum allowed object size.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> EntityTooLarge</p> </li> <li> <p> <i>Description:</i> Your proposed upload exceeds the maximum allowed object size.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> ExpiredToken</p> </li> <li> <p> <i>Description:</i> The provided token has expired.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> IllegalVersioningConfigurationException </p> </li> <li> <p> <i>Description:</i> Indicates that the versioning configuration specified in the request is invalid.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> IncompleteBody</p> </li> <li> <p> <i>Description:</i> You did not provide the number of bytes specified by the Content-Length HTTP header</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> IncorrectNumberOfFilesInPostRequest</p> </li> <li> <p> <i>Description:</i> POST requires exactly one file upload per request.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InlineDataTooLarge</p> </li> <li> <p> <i>Description:</i> Inline data exceeds the maximum allowed size.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InternalError</p> </li> <li> <p> <i>Description:</i> We encountered an internal error. Please try again.</p> </li> <li> <p> <i>HTTP Status Code:</i> 500 Internal Server Error</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Server</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidAccessKeyId</p> </li> <li> <p> <i>Description:</i> The Amazon Web Services access key ID you provided does not exist in our records.</p> </li> <li> <p> <i>HTTP Status Code:</i> 403 Forbidden</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidAddressingHeader</p> </li> <li> <p> <i>Description:</i> You must specify the Anonymous role.</p> </li> <li> <p> <i>HTTP Status Code:</i> N/A</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidArgument</p> </li> <li> <p> <i>Description:</i> Invalid Argument</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidBucketName</p> </li> <li> <p> <i>Description:</i> The specified bucket is not valid.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidBucketState</p> </li> <li> <p> <i>Description:</i> The request is not valid with the current state of the bucket.</p> </li> <li> <p> <i>HTTP Status Code:</i> 409 Conflict</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidDigest</p> </li> <li> <p> <i>Description:</i> The Content-MD5 you specified is not valid.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidEncryptionAlgorithmError</p> </li> <li> <p> <i>Description:</i> The encryption request you specified is not valid. The valid value is AES256.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidLocationConstraint</p> </li> <li> <p> <i>Description:</i> The specified location constraint is not valid. For more information about Regions, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro\">How to Select a Region for Your Buckets</a>. </p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidObjectState</p> </li> <li> <p> <i>Description:</i> The action is not valid for the current state of the object.</p> </li> <li> <p> <i>HTTP Status Code:</i> 403 Forbidden</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidPart</p> </li> <li> <p> <i>Description:</i> One or more of the specified parts could not be found. The part might not have been uploaded, or the specified entity tag might not have matched the part's entity tag.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidPartOrder</p> </li> <li> <p> <i>Description:</i> The list of parts was not in ascending order. Parts list must be specified in order by part number.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidPayer</p> </li> <li> <p> <i>Description:</i> All access to this object has been disabled. Please contact Amazon Web Services Support for further assistance.</p> </li> <li> <p> <i>HTTP Status Code:</i> 403 Forbidden</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidPolicyDocument</p> </li> <li> <p> <i>Description:</i> The content of the form does not meet the conditions specified in the policy document.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidRange</p> </li> <li> <p> <i>Description:</i> The requested range cannot be satisfied.</p> </li> <li> <p> <i>HTTP Status Code:</i> 416 Requested Range Not Satisfiable</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidRequest</p> </li> <li> <p> <i>Description:</i> Please use <code>AWS4-HMAC-SHA256</code>.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>Code:</i> N/A</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidRequest</p> </li> <li> <p> <i>Description:</i> SOAP requests must be made over an HTTPS connection.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidRequest</p> </li> <li> <p> <i>Description:</i> Amazon S3 Transfer Acceleration is not supported for buckets with non-DNS compliant names.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>Code:</i> N/A</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidRequest</p> </li> <li> <p> <i>Description:</i> Amazon S3 Transfer Acceleration is not supported for buckets with periods (.) in their names.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>Code:</i> N/A</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidRequest</p> </li> <li> <p> <i>Description:</i> Amazon S3 Transfer Accelerate endpoint only supports virtual style requests.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>Code:</i> N/A</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidRequest</p> </li> <li> <p> <i>Description:</i> Amazon S3 Transfer Accelerate is not configured on this bucket.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>Code:</i> N/A</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidRequest</p> </li> <li> <p> <i>Description:</i> Amazon S3 Transfer Accelerate is disabled on this bucket.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>Code:</i> N/A</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidRequest</p> </li> <li> <p> <i>Description:</i> Amazon S3 Transfer Acceleration is not supported on this bucket. Contact Amazon Web Services Support for more information.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>Code:</i> N/A</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidRequest</p> </li> <li> <p> <i>Description:</i> Amazon S3 Transfer Acceleration cannot be enabled on this bucket. Contact Amazon Web Services Support for more information.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>Code:</i> N/A</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidSecurity</p> </li> <li> <p> <i>Description:</i> The provided security credentials are not valid.</p> </li> <li> <p> <i>HTTP Status Code:</i> 403 Forbidden</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidSOAPRequest</p> </li> <li> <p> <i>Description:</i> The SOAP request body is invalid.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidStorageClass</p> </li> <li> <p> <i>Description:</i> The storage class you specified is not valid.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidTargetBucketForLogging</p> </li> <li> <p> <i>Description:</i> The target bucket for logging does not exist, is not owned by you, or does not have the appropriate grants for the log-delivery group. </p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidToken</p> </li> <li> <p> <i>Description:</i> The provided token is malformed or otherwise invalid.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> InvalidURI</p> </li> <li> <p> <i>Description:</i> Couldn't parse the specified URI.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> KeyTooLongError</p> </li> <li> <p> <i>Description:</i> Your key is too long.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> MalformedACLError</p> </li> <li> <p> <i>Description:</i> The XML you provided was not well-formed or did not validate against our published schema.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> MalformedPOSTRequest </p> </li> <li> <p> <i>Description:</i> The body of your POST request is not well-formed multipart/form-data.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> MalformedXML</p> </li> <li> <p> <i>Description:</i> This happens when the user sends malformed XML (XML that doesn't conform to the published XSD) for the configuration. The error message is, \"The XML you provided was not well-formed or did not validate against our published schema.\" </p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> MaxMessageLengthExceeded</p> </li> <li> <p> <i>Description:</i> Your request was too big.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> MaxPostPreDataLengthExceededError</p> </li> <li> <p> <i>Description:</i> Your POST request fields preceding the upload file were too large.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> MetadataTooLarge</p> </li> <li> <p> <i>Description:</i> Your metadata headers exceed the maximum allowed metadata size.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> MethodNotAllowed</p> </li> <li> <p> <i>Description:</i> The specified method is not allowed against this resource.</p> </li> <li> <p> <i>HTTP Status Code:</i> 405 Method Not Allowed</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> MissingAttachment</p> </li> <li> <p> <i>Description:</i> A SOAP attachment was expected, but none were found.</p> </li> <li> <p> <i>HTTP Status Code:</i> N/A</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> MissingContentLength</p> </li> <li> <p> <i>Description:</i> You must provide the Content-Length HTTP header.</p> </li> <li> <p> <i>HTTP Status Code:</i> 411 Length Required</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> MissingRequestBodyError</p> </li> <li> <p> <i>Description:</i> This happens when the user sends an empty XML document as a request. The error message is, \"Request body is empty.\" </p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> MissingSecurityElement</p> </li> <li> <p> <i>Description:</i> The SOAP 1.1 request is missing a security element.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> MissingSecurityHeader</p> </li> <li> <p> <i>Description:</i> Your request is missing a required header.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> NoLoggingStatusForKey</p> </li> <li> <p> <i>Description:</i> There is no such thing as a logging status subresource for a key.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> NoSuchBucket</p> </li> <li> <p> <i>Description:</i> The specified bucket does not exist.</p> </li> <li> <p> <i>HTTP Status Code:</i> 404 Not Found</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> NoSuchBucketPolicy</p> </li> <li> <p> <i>Description:</i> The specified bucket does not have a bucket policy.</p> </li> <li> <p> <i>HTTP Status Code:</i> 404 Not Found</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> NoSuchKey</p> </li> <li> <p> <i>Description:</i> The specified key does not exist.</p> </li> <li> <p> <i>HTTP Status Code:</i> 404 Not Found</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> NoSuchLifecycleConfiguration</p> </li> <li> <p> <i>Description:</i> The lifecycle configuration does not exist. </p> </li> <li> <p> <i>HTTP Status Code:</i> 404 Not Found</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> NoSuchUpload</p> </li> <li> <p> <i>Description:</i> The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed.</p> </li> <li> <p> <i>HTTP Status Code:</i> 404 Not Found</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> NoSuchVersion </p> </li> <li> <p> <i>Description:</i> Indicates that the version ID specified in the request does not match an existing version.</p> </li> <li> <p> <i>HTTP Status Code:</i> 404 Not Found</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> NotImplemented</p> </li> <li> <p> <i>Description:</i> A header you provided implies functionality that is not implemented.</p> </li> <li> <p> <i>HTTP Status Code:</i> 501 Not Implemented</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Server</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> NotSignedUp</p> </li> <li> <p> <i>Description:</i> Your account is not signed up for the Amazon S3 service. You must sign up before you can use Amazon S3. You can sign up at the following URL: <a href=\"http://aws.amazon.com/s3\">Amazon S3</a> </p> </li> <li> <p> <i>HTTP Status Code:</i> 403 Forbidden</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> OperationAborted</p> </li> <li> <p> <i>Description:</i> A conflicting conditional action is currently in progress against this resource. Try again.</p> </li> <li> <p> <i>HTTP Status Code:</i> 409 Conflict</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> PermanentRedirect</p> </li> <li> <p> <i>Description:</i> The bucket you are attempting to access must be addressed using the specified endpoint. Send all future requests to this endpoint.</p> </li> <li> <p> <i>HTTP Status Code:</i> 301 Moved Permanently</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> PreconditionFailed</p> </li> <li> <p> <i>Description:</i> At least one of the preconditions you specified did not hold.</p> </li> <li> <p> <i>HTTP Status Code:</i> 412 Precondition Failed</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> Redirect</p> </li> <li> <p> <i>Description:</i> Temporary redirect.</p> </li> <li> <p> <i>HTTP Status Code:</i> 307 Moved Temporarily</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> RestoreAlreadyInProgress</p> </li> <li> <p> <i>Description:</i> Object restore is already in progress.</p> </li> <li> <p> <i>HTTP Status Code:</i> 409 Conflict</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> RequestIsNotMultiPartContent</p> </li> <li> <p> <i>Description:</i> Bucket POST must be of the enclosure-type multipart/form-data.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> RequestTimeout</p> </li> <li> <p> <i>Description:</i> Your socket connection to the server was not read from or written to within the timeout period.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> RequestTimeTooSkewed</p> </li> <li> <p> <i>Description:</i> The difference between the request time and the server's time is too large.</p> </li> <li> <p> <i>HTTP Status Code:</i> 403 Forbidden</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> RequestTorrentOfBucketError</p> </li> <li> <p> <i>Description:</i> Requesting the torrent file of a bucket is not permitted.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> SignatureDoesNotMatch</p> </li> <li> <p> <i>Description:</i> The request signature we calculated does not match the signature you provided. Check your Amazon Web Services secret access key and signing method. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html\">REST Authentication</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/SOAPAuthentication.html\">SOAP Authentication</a> for details.</p> </li> <li> <p> <i>HTTP Status Code:</i> 403 Forbidden</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> ServiceUnavailable</p> </li> <li> <p> <i>Description:</i> Reduce your request rate.</p> </li> <li> <p> <i>HTTP Status Code:</i> 503 Service Unavailable</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Server</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> SlowDown</p> </li> <li> <p> <i>Description:</i> Reduce your request rate.</p> </li> <li> <p> <i>HTTP Status Code:</i> 503 Slow Down</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Server</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> TemporaryRedirect</p> </li> <li> <p> <i>Description:</i> You are being redirected to the bucket while DNS updates.</p> </li> <li> <p> <i>HTTP Status Code:</i> 307 Moved Temporarily</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> TokenRefreshRequired</p> </li> <li> <p> <i>Description:</i> The provided token must be refreshed.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> TooManyBuckets</p> </li> <li> <p> <i>Description:</i> You have attempted to create more buckets than allowed.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> UnexpectedContent</p> </li> <li> <p> <i>Description:</i> This request does not support content.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> UnresolvableGrantByEmailAddress</p> </li> <li> <p> <i>Description:</i> The email address you provided does not match any account on record.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code:</i> UserKeyMustBeSpecified</p> </li> <li> <p> <i>Description:</i> The bucket POST must contain the specified field name. If it is specified, check the order of the fields.</p> </li> <li> <p> <i>HTTP Status Code:</i> 400 Bad Request</p> </li> <li> <p> <i>SOAP Fault Code Prefix:</i> Client</p> </li> </ul> </li> </ul> <p/>"
              }
            ]
          },
          "Message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Message"
              },
              {
                "description": "The error message contains a generic description of the error condition in English. It is intended for a human audience. Simple programs display the message directly to the end user if they encounter an error condition they don't know how or don't care to handle. Sophisticated programs with more exhaustive error handling and proper internationalization are more likely to ignore the error message."
              }
            ]
          }
        },
        "description": "Container for all error elements."
      },
      "ErrorCode": {
        "type": "string"
      },
      "ErrorMessage": {
        "type": "string"
      },
      "ExpirationStatus": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ]
      },
      "ExpiredObjectDeleteMarker": {
        "type": "boolean"
      },
      "ExposeHeader": {
        "type": "string"
      },
      "Expression": {
        "type": "string"
      },
      "ExpressionType": {
        "type": "string",
        "enum": [
          "SQL"
        ]
      },
      "FetchOwner": {
        "type": "boolean"
      },
      "FilterRuleName": {
        "type": "string",
        "enum": [
          "prefix",
          "suffix"
        ]
      },
      "FilterRuleValue": {
        "type": "string"
      },
      "FilterRule": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterRuleName"
              },
              {
                "description": ""
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterRuleValue"
              },
              {
                "description": "The value that the filter searches for in object key names."
              }
            ]
          }
        },
        "description": "Specifies the Amazon S3 object key name to filter on and whether to filter on the suffix or prefix of the key name."
      },
      "FilterRuleList": {
        "type": "array",
        "description": "A list of containers for the key-value pair that defines the criteria for the filter rule.",
        "items": {
          "$ref": "#/components/schemas/FilterRule"
        },
        "xml": {
          "wrapped": false
        }
      },
      "GetBucketLocationRequest": {
        "type": "object",
        "title": "GetBucketLocationRequest",
        "properties": {}
      },
      "GetBucketVersioningRequest": {
        "type": "object",
        "title": "GetBucketVersioningRequest",
        "properties": {}
      },
      "GetObjectAttributesParts": {
        "type": "object",
        "properties": {
          "TotalPartsCount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartsCount"
              },
              {
                "xml": {
                  "name": "PartsCount"
                },
                "description": "The total number of parts."
              }
            ]
          },
          "PartNumberMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartNumberMarker"
              },
              {
                "description": "The marker for the current part."
              }
            ]
          },
          "NextPartNumberMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NextPartNumberMarker"
              },
              {
                "description": "When a list is truncated, this element specifies the last part in the list, as well as the value to use for the <code>PartNumberMarker</code> request parameter in a subsequent request."
              }
            ]
          },
          "MaxParts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaxParts"
              },
              {
                "description": "The maximum number of parts allowed in the response."
              }
            ]
          },
          "IsTruncated": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IsTruncated"
              },
              {
                "description": "Indicates whether the returned list of parts is truncated. A value of <code>true</code> indicates that the list was truncated. A list can be truncated if the number of parts exceeds the limit returned in the <code>MaxParts</code> element."
              }
            ]
          },
          "Parts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartsList"
              },
              {
                "xml": {
                  "name": "Part"
                },
                "description": "A container for elements related to a particular part. A response can contain zero or more <code>Parts</code> elements."
              }
            ]
          }
        },
        "description": "A collection of parts associated with a multipart upload."
      },
      "ObjectSize": {
        "type": "integer"
      },
      "PartsCount": {
        "type": "integer"
      },
      "PartNumberMarker": {
        "type": "integer"
      },
      "NextPartNumberMarker": {
        "type": "integer"
      },
      "MaxParts": {
        "type": "integer"
      },
      "IsTruncated": {
        "type": "boolean"
      },
      "PartsList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ObjectPart"
        },
        "xml": {
          "wrapped": false
        }
      },
      "ObjectAttributesList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ObjectAttributes"
        }
      },
      "GetObjectAttributesRequest": {
        "type": "object",
        "title": "GetObjectAttributesRequest",
        "properties": {}
      },
      "ObjectLockConfiguration": {
        "type": "object",
        "properties": {
          "ObjectLockEnabled": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectLockEnabled"
              },
              {
                "description": "Indicates whether this bucket has an Object Lock configuration enabled. Enable <code>ObjectLockEnabled</code> when you apply <code>ObjectLockConfiguration</code> to a bucket. "
              }
            ]
          },
          "Rule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectLockRule"
              },
              {
                "description": ""
              }
            ]
          }
        },
        "description": "The container element for Object Lock configuration parameters."
      },
      "GetObjectLockConfigurationRequest": {
        "type": "object",
        "title": "GetObjectLockConfigurationRequest",
        "properties": {}
      },
      "MissingMeta": {
        "type": "integer"
      },
      "IfMatch": {
        "type": "string"
      },
      "IfModifiedSince": {
        "type": "string",
        "format": "date-time"
      },
      "IfNoneMatch": {
        "type": "string"
      },
      "IfUnmodifiedSince": {
        "type": "string",
        "format": "date-time"
      },
      "Range": {
        "type": "string"
      },
      "ResponseCacheControl": {
        "type": "string"
      },
      "ResponseContentDisposition": {
        "type": "string"
      },
      "ResponseContentEncoding": {
        "type": "string"
      },
      "ResponseContentLanguage": {
        "type": "string"
      },
      "ResponseContentType": {
        "type": "string"
      },
      "ResponseExpires": {
        "type": "string",
        "format": "date-time"
      },
      "GetObjectRequest": {
        "type": "object",
        "title": "GetObjectRequest",
        "properties": {}
      },
      "GetObjectResponseStatusCode": {
        "type": "integer"
      },
      "ObjectLockRetention": {
        "type": "object",
        "properties": {
          "Mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectLockRetentionMode"
              },
              {
                "description": "Indicates the Retention mode for the specified object."
              }
            ]
          },
          "RetainUntilDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "The date on which this Object Lock Retention will expire."
              }
            ]
          }
        },
        "description": "A Retention configuration for an object."
      },
      "Type": {
        "type": "string",
        "enum": [
          "CanonicalUser",
          "AmazonCustomerByEmail",
          "Group"
        ]
      },
      "URI": {
        "type": "string"
      },
      "HeadBucketRequest": {
        "type": "object",
        "title": "HeadBucketRequest",
        "properties": {}
      },
      "HeadObjectRequest": {
        "type": "object",
        "title": "HeadObjectRequest",
        "properties": {}
      },
      "HostName": {
        "type": "string"
      },
      "HttpRedirectCode": {
        "type": "string"
      },
      "Suffix": {
        "type": "string"
      },
      "Initiated": {
        "type": "string",
        "format": "date-time"
      },
      "Initiator": {
        "type": "object",
        "properties": {
          "ID": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ID"
              },
              {
                "description": "If the principal is an Amazon Web Services account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value."
              }
            ]
          },
          "DisplayName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayName"
              },
              {
                "description": "Name of the Principal."
              }
            ]
          }
        },
        "description": "Container element that identifies who initiated the multipart upload. "
      },
      "InputSerialization": {
        "type": "object",
        "properties": {
          "CSV": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CSVInput"
              },
              {
                "description": "Describes the serialization of a CSV-encoded object."
              }
            ]
          },
          "CompressionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompressionType"
              },
              {
                "description": "Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value: NONE."
              }
            ]
          },
          "JSON": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JSONInput"
              },
              {
                "description": "Specifies JSON as object's input serialization format."
              }
            ]
          },
          "Parquet": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ParquetInput"
              },
              {
                "description": "Specifies Parquet as object's input serialization format."
              }
            ]
          }
        },
        "description": "Describes the serialization format of the object."
      },
      "JSONType": {
        "type": "string",
        "enum": [
          "DOCUMENT",
          "LINES"
        ]
      },
      "KeyCount": {
        "type": "integer"
      },
      "KeyMarker": {
        "type": "string"
      },
      "ObjectSizeGreaterThanBytes": {
        "type": "integer"
      },
      "ObjectSizeLessThanBytes": {
        "type": "integer"
      },
      "Token": {
        "type": "string"
      },
      "NextToken": {
        "type": "string"
      },
      "UploadIdMarker": {
        "type": "string"
      },
      "NextKeyMarker": {
        "type": "string"
      },
      "NextUploadIdMarker": {
        "type": "string"
      },
      "MaxUploads": {
        "type": "integer"
      },
      "MultipartUploadList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/MultipartUpload"
        },
        "xml": {
          "wrapped": false
        }
      },
      "ListMultipartUploadsRequest": {
        "type": "object",
        "title": "ListMultipartUploadsRequest",
        "properties": {}
      },
      "VersionIdMarker": {
        "type": "string"
      },
      "NextVersionIdMarker": {
        "type": "string"
      },
      "ObjectVersionList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ObjectVersion"
        },
        "xml": {
          "wrapped": false
        }
      },
      "MaxKeys": {
        "type": "integer"
      },
      "ListObjectVersionsRequest": {
        "type": "object",
        "title": "ListObjectVersionsRequest",
        "properties": {}
      },
      "Marker": {
        "type": "string"
      },
      "NextMarker": {
        "type": "string"
      },
      "ObjectList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Object"
        },
        "xml": {
          "wrapped": false
        }
      },
      "ListObjectsRequest": {
        "type": "object",
        "title": "ListObjectsRequest",
        "properties": {}
      },
      "StartAfter": {
        "type": "string"
      },
      "ListObjectsV2Request": {
        "type": "object",
        "title": "ListObjectsV2Request",
        "properties": {}
      },
      "Parts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Part"
        },
        "xml": {
          "wrapped": false
        }
      },
      "ListPartsRequest": {
        "type": "object",
        "title": "ListPartsRequest",
        "properties": {}
      },
      "LocationPrefix": {
        "type": "string"
      },
      "TargetPrefix": {
        "type": "string"
      },
      "MetadataKey": {
        "type": "string"
      },
      "MetadataEntry": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataKey"
              },
              {
                "description": "Name of the Object."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataValue"
              },
              {
                "description": "Value of the Object."
              }
            ]
          }
        },
        "description": "A metadata key-value pair to store with an object."
      },
      "Minutes": {
        "type": "integer"
      },
      "MultipartUpload": {
        "type": "object",
        "properties": {
          "UploadId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MultipartUploadId"
              },
              {
                "description": "Upload ID that identifies the multipart upload."
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectKey"
              },
              {
                "description": "Key of the object for which the multipart upload was initiated."
              }
            ]
          },
          "Initiated": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Initiated"
              },
              {
                "description": "Date and time at which the multipart upload was initiated."
              }
            ]
          },
          "StorageClass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageClass"
              },
              {
                "description": "The class of storage used to store the object."
              }
            ]
          },
          "Owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Owner"
              },
              {
                "description": "Specifies the owner of the object that is part of the multipart upload. "
              }
            ]
          },
          "Initiator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Initiator"
              },
              {
                "description": "Identifies who initiated the multipart upload."
              }
            ]
          },
          "ChecksumAlgorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumAlgorithm"
              },
              {
                "description": "The algorithm that was used to create a checksum of the object."
              }
            ]
          }
        },
        "description": "Container for the <code>MultipartUpload</code> for the Amazon S3 object."
      },
      "VersionCount": {
        "type": "integer"
      },
      "TransitionStorageClass": {
        "type": "string",
        "enum": [
          "GLACIER",
          "STANDARD_IA",
          "ONEZONE_IA",
          "INTELLIGENT_TIERING",
          "DEEP_ARCHIVE",
          "GLACIER_IR"
        ]
      },
      "S3KeyFilter": {
        "type": "object",
        "properties": {
          "FilterRules": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterRuleList"
              },
              {
                "xml": {
                  "name": "FilterRule"
                }
              }
            ]
          }
        },
        "description": "A container for object key name prefix and suffix filtering rules."
      },
      "Size": {
        "type": "integer"
      },
      "Object": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectKey"
              },
              {
                "description": "The name that you assign to an object. You use the object key to retrieve the object."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastModified"
              },
              {
                "description": "Creation date of the object."
              }
            ]
          },
          "ETag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ETag"
              },
              {
                "description": "<p>The entity tag is a hash of the object. The ETag reflects changes only to the contents of an object, not its metadata. The ETag may or may not be an MD5 digest of the object data. Whether or not it is depends on how the object was created and how it is encrypted as described below:</p> <ul> <li> <p>Objects created by the PUT Object, POST Object, or Copy operation, or through the Amazon Web Services Management Console, and are encrypted by SSE-S3 or plaintext, have ETags that are an MD5 digest of their object data.</p> </li> <li> <p>Objects created by the PUT Object, POST Object, or Copy operation, or through the Amazon Web Services Management Console, and are encrypted by SSE-C or SSE-KMS, have ETags that are not an MD5 digest of their object data.</p> </li> <li> <p>If an object is created by either the Multipart Upload or Part Copy operation, the ETag is not an MD5 digest, regardless of the method of encryption. If an object is larger than 16 MB, the Amazon Web Services Management Console will upload or copy that object as a Multipart Upload, and therefore the ETag will not be an MD5 digest.</p> </li> </ul>"
              }
            ]
          },
          "ChecksumAlgorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumAlgorithmList"
              },
              {
                "description": "The algorithm that was used to create a checksum of the object."
              }
            ]
          },
          "Size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              },
              {
                "description": "Size in bytes of the object"
              }
            ]
          },
          "StorageClass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectStorageClass"
              },
              {
                "description": "The class of storage used to store the object."
              }
            ]
          },
          "Owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Owner"
              },
              {
                "description": "The owner of the object"
              }
            ]
          }
        },
        "description": "An object consists of data and its descriptive metadata."
      },
      "ObjectIdentifier": {
        "type": "object",
        "required": [
          "Key"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectKey"
              },
              {
                "description": "<p>Key name of the object.</p> <important> <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints\"> XML related object key constraints</a>.</p> </important>"
              }
            ]
          },
          "VersionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectVersionId"
              },
              {
                "description": "VersionId for the specific version of the object to delete."
              }
            ]
          }
        },
        "description": "Object Identifier is unique value to identify objects."
      },
      "ObjectLockToken": {
        "type": "string"
      },
      "ObjectPart": {
        "type": "object",
        "properties": {
          "PartNumber": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartNumber"
              },
              {
                "description": "The part number identifying the part. This value is a positive integer between 1 and 10,000."
              }
            ]
          },
          "Size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              },
              {
                "description": "The size of the uploaded part in bytes."
              }
            ]
          },
          "ChecksumCRC32": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32"
              },
              {
                "description": "This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC32 checksum of the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html\">Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumCRC32C": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32C"
              },
              {
                "description": "The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumSHA1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA1"
              },
              {
                "description": "The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumSHA256": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA256"
              },
              {
                "description": "The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          }
        },
        "description": "A container for elements related to an individual part."
      },
      "ObjectVersionStorageClass": {
        "type": "string",
        "enum": [
          "STANDARD"
        ]
      },
      "ObjectVersion": {
        "type": "object",
        "properties": {
          "ETag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ETag"
              },
              {
                "description": "The entity tag is an MD5 hash of that version of the object."
              }
            ]
          },
          "ChecksumAlgorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumAlgorithmList"
              },
              {
                "description": "The algorithm that was used to create a checksum of the object."
              }
            ]
          },
          "Size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              },
              {
                "description": "Size in bytes of the object."
              }
            ]
          },
          "StorageClass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectVersionStorageClass"
              },
              {
                "description": "The class of storage used to store the object."
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectKey"
              },
              {
                "description": "The object key."
              }
            ]
          },
          "VersionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectVersionId"
              },
              {
                "description": "Version ID of an object."
              }
            ]
          },
          "IsLatest": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IsLatest"
              },
              {
                "description": "Specifies whether the object is (true) or is not (false) the latest version of an object."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastModified"
              },
              {
                "description": "Date and time the object was last modified."
              }
            ]
          },
          "Owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Owner"
              },
              {
                "description": "Specifies the owner of the object."
              }
            ]
          }
        },
        "description": "The version of an object."
      },
      "OutputSerialization": {
        "type": "object",
        "properties": {
          "CSV": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CSVOutput"
              },
              {
                "description": "Describes the serialization of CSV-encoded Select results."
              }
            ]
          },
          "JSON": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JSONOutput"
              },
              {
                "description": "Specifies JSON as request's output serialization format."
              }
            ]
          }
        },
        "description": "Describes how results of the Select job are serialized."
      },
      "Part": {
        "type": "object",
        "properties": {
          "PartNumber": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartNumber"
              },
              {
                "description": "Part number identifying the part. This is a positive integer between 1 and 10,000."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastModified"
              },
              {
                "description": "Date and time at which the part was uploaded."
              }
            ]
          },
          "ETag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ETag"
              },
              {
                "description": "Entity tag returned when the part was uploaded."
              }
            ]
          },
          "Size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Size"
              },
              {
                "description": "Size in bytes of the uploaded part data."
              }
            ]
          },
          "ChecksumCRC32": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32"
              },
              {
                "description": "This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC32 checksum of the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html\">Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumCRC32C": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumCRC32C"
              },
              {
                "description": "The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumSHA1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA1"
              },
              {
                "description": "The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated with multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums\"> Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          },
          "ChecksumSHA256": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChecksumSHA256"
              },
              {
                "description": "This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 256-bit SHA-256 digest of the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html\">Checking object integrity</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          }
        },
        "description": "Container for elements related to a part."
      },
      "Priority": {
        "type": "integer"
      },
      "Protocol": {
        "type": "string",
        "enum": [
          "http",
          "https"
        ]
      },
      "SkipValidation": {
        "type": "boolean"
      },
      "VersioningConfiguration": {
        "type": "object",
        "properties": {
          "MFADelete": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MFADelete"
              },
              {
                "xml": {
                  "name": "MfaDelete"
                },
                "description": ""
              }
            ]
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BucketVersioningStatus"
              },
              {
                "description": "The versioning state of the bucket."
              }
            ]
          }
        },
        "description": ""
      },
      "PutBucketVersioningRequest": {
        "type": "object",
        "required": [
          "VersioningConfiguration"
        ],
        "title": "PutBucketVersioningRequest",
        "properties": {
          "VersioningConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersioningConfiguration"
              },
              {
                "description": "Container for setting the versioning state."
              }
            ]
          }
        },
        "xml": {
          "namespace": "http://s3.amazonaws.com/doc/2006-03-01/"
        }
      },
      "PutObjectRequest": {
        "type": "object",
        "title": "PutObjectRequest",
        "properties": {
          "Body": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Body"
              },
              {
                "description": "Object data."
              }
            ]
          },
          "Metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              },
              {
                "xml": {
                  "name": "x-amz-meta-"
                },
                "description": "A map of metadata to store with the object in S3."
              }
            ]
          }
        }
      },
      "ReplaceKeyPrefixWith": {
        "type": "string"
      },
      "ReplaceKeyWith": {
        "type": "string"
      },
      "UserMetadata": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/MetadataEntry"
            },
            {
              "xml": {
                "name": "MetadataEntry"
              }
            }
          ]
        }
      },
      "ScanRange": {
        "type": "object",
        "properties": {
          "Start": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Start"
              },
              {
                "description": "Specifies the start of the byte range. This parameter is optional. Valid values: non-negative integers. The default value is 0. If only <code>start</code> is supplied, it means scan from that point to the end of the file. For example, <code>&lt;scanrange&gt;&lt;start&gt;50&lt;/start&gt;&lt;/scanrange&gt;</code> means scan from byte 50 until the end of the file."
              }
            ]
          },
          "End": {
            "allOf": [
              {
                "$ref": "#/components/schemas/End"
              },
              {
                "description": "Specifies the end of the byte range. This parameter is optional. Valid values: non-negative integers. The default value is one less than the size of the object being queried. If only the End parameter is supplied, it is interpreted to mean scan the last N bytes of the file. For example, <code>&lt;scanrange&gt;&lt;end&gt;50&lt;/end&gt;&lt;/scanrange&gt;</code> means scan the last 50 bytes."
              }
            ]
          }
        },
        "description": "Specifies the byte range of the object to get the records from. A record is processed when its first byte is contained by the range. This parameter is optional, but when specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the start and end of the range."
      },
      "StatsEvent": {
        "type": "object",
        "properties": {
          "Details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Stats"
              },
              {
                "description": "The Stats event details."
              }
            ]
          }
        },
        "description": "Container for the Stats Event."
      },
      "Stats": {
        "type": "object",
        "properties": {
          "BytesScanned": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BytesScanned"
              },
              {
                "description": "The total number of object bytes scanned."
              }
            ]
          },
          "BytesProcessed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BytesProcessed"
              },
              {
                "description": "The total number of uncompressed object bytes processed."
              }
            ]
          },
          "BytesReturned": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BytesReturned"
              },
              {
                "description": "The total number of bytes of records payload data returned."
              }
            ]
          }
        },
        "description": "Container for the stats details."
      },
      "Value": {
        "type": "string"
      },
      "UploadPartCopyRequest": {
        "type": "object",
        "title": "UploadPartCopyRequest",
        "properties": {}
      },
      "UploadPartRequest": {
        "type": "object",
        "title": "UploadPartRequest",
        "properties": {
          "Body": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Body"
              },
              {
                "description": "Object data."
              }
            ]
          }
        }
      },
      "WriteGetObjectResponseRequest": {
        "type": "object",
        "title": "WriteGetObjectResponseRequest",
        "properties": {
          "Body": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Body"
              },
              {
                "description": "The object data."
              }
            ]
          },
          "Metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              },
              {
                "xml": {
                  "name": "x-amz-meta-"
                },
                "description": "A map of metadata to store with the object in S3."
              }
            ]
          }
        }
      },
      "StorageClass": {
        "type": "string",
        "enum": [
          "STANDARD"
        ]
      },
      "GetBucketLocationOutput": {
        "type": "object",
        "example": {
          "LocationConstraint": "us-west-2"
        },
        "properties": {
          "LocationConstraint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BucketLocationConstraint"
              },
              {
                "description": ""
              }
            ]
          }
        }
      },
      "ObjectStorageClass": {
        "type": "string",
        "enum": [
          "STANDARD"
        ]
      }
    }
  },
  "security": [
    {
      "hmac": []
    }
  ]
}
